{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1632990875891},{"_id":"themes/clean-blog/_config.yml","hash":"3192ff64e67182ba2e3b2f2ee36238d34b2d63ac","modified":1632995324600},{"_id":"themes/clean-blog/README.md","hash":"3663228602b0a5f8941e49e7851698ea13a07eb3","modified":1632990875891},{"_id":"themes/clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1632990875891},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1632990875892},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1632990875892},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1632990875892},{"_id":"themes/clean-blog/languages/ko.yml","hash":"40b97194caa097cbc037a79c86530be132743920","modified":1632990875893},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1632990875893},{"_id":"themes/clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1632990875892},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1632990875893},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1632990875893},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1632990875893},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1632990875893},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1632990875894},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"3492fc8ec76f49eb05fa4c0d48db46b76f04805c","modified":1632990875898},{"_id":"themes/clean-blog/layout/index.ejs","hash":"41b0fec1a9049518040dc6fb4857659485ed5136","modified":1632990875898},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1632990875898},{"_id":"themes/clean-blog/layout/page.ejs","hash":"9e6c5704b26a6732a42f01bd09635b3b81909403","modified":1632990875898},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1632990875898},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1632990875894},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1632990875894},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1632990875894},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"f78ff5eedf9045148ee255d5387a05a7000a7a47","modified":1632990875895},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1632990875895},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1632990875895},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1632990875895},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"d252fb1a41890e6481bb054f9cc4ceec3c0b0ed9","modified":1632990875896},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1632990875896},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1632990875896},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"3ccfc84e3ed67415fe71a1767d5e77a6b1f84a7a","modified":1632990875897},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1632990875897},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1632990875897},{"_id":"themes/clean-blog/layout/_partial/tag-category-index.ejs","hash":"10cdc1b7866999c714a666557c150d2c79c1fba9","modified":1632990875897},{"_id":"themes/clean-blog/source/css/article.styl","hash":"f5294d7a3d6127fcb287de3ff0c12aebb1766c7b","modified":1632990875899},{"_id":"themes/clean-blog/source/css/base.styl","hash":"0b54825903d08b5f7f7fe95ef4261c90e980abdb","modified":1632990875899},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1632990875899},{"_id":"themes/clean-blog/source/css/style.styl","hash":"c40dc495a41007d21c59f342ee42b2d31d7b5ff4","modified":1632990875900},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1632990875900},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1632990875900},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1632990875904},{"_id":"source/about/index.md","hash":"14b0836991e175e763cf02e43b0e18ea574e6682","modified":1632990875889},{"_id":"source/_posts/CPython-zipfile-Code-Tracing.md","hash":"00d63e3b6b96fbfd0a557a7b6f3b253dfa924717","modified":1632994852573},{"_id":"source/_posts/Debian-Packaging.md","hash":"17c7537bc4ae604b9dc961f7e6e79aac1fa249e4","modified":1632990875888},{"_id":"source/_posts/pipenv.md","hash":"e13b8b338ba7e32b4a55fab4924b4f67b7e14192","modified":1632990875889},{"_id":"source/categories/index.md","hash":"8e6b60e5168f98481fa8d3bb63d75296743a9a5c","modified":1632990875890},{"_id":"source/tags/index.md","hash":"1bb21982e938f3225ba50ec758db4089724719b5","modified":1632990875890},{"_id":"source/_posts/.idea/_posts.iml","hash":"f223b4ce8a5c906ec7d06d73d942c033b0b45271","modified":1632990875887},{"_id":"source/_posts/.idea/modules.xml","hash":"6abd6dcb985048745c9214d67295bdf1597307ee","modified":1632990875888},{"_id":"source/_posts/.idea/workspace.xml","hash":"3b9f444ac1a363ed4e3eea8aace853e5db51f6de","modified":1632990875888},{"_id":"source/_posts/.idea/misc.xml","hash":"c4670bd34d32755c8a349b3b32400b5dc3ee2e87","modified":1632990875888},{"_id":"source/_posts/.idea/inspectionProfiles/profiles_settings.xml","hash":"123097fe0d1ca811d1a355725d7066386ed490ec","modified":1632990875888},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1632990875901},{"_id":"public/atom.xml","hash":"83ce989fc98cd7a2ff7052699b4f4aed9b006c57","modified":1632995330306},{"_id":"public/sitemap.xml","hash":"b844265245ab2e6ae1c349ae977b7f7812972602","modified":1632995330306},{"_id":"public/content.json","hash":"34e890d6a365a6087826335ac27656cc2d29ba67","modified":1632995330306},{"_id":"public/about/index.html","hash":"8f7742055895791c1683387f8d3cf5027737674d","modified":1632995330306},{"_id":"public/tags/index.html","hash":"8649ba8254965af1931d8fcd42b9f885bab79be6","modified":1632995330306},{"_id":"public/categories/index.html","hash":"c5ae5f40ecd0fc7d6640ca9f3e54b000d86ebbe8","modified":1632995330306},{"_id":"public/2021/05/03/Debian-Packaging/index.html","hash":"ec1abcb2e119f0796ad4137ca61104689dc609fa","modified":1632995330306},{"_id":"public/2020/09/24/pipenv/index.html","hash":"14a6da9bacf4c5e4971a375342e84b46df1dfdd4","modified":1632995330306},{"_id":"public/archives/index.html","hash":"6efcca2055513433d5e3f40aea18113a042a2ea2","modified":1632995330306},{"_id":"public/archives/2020/index.html","hash":"5bb05334f79395b96dfa8c072bceb46fdd31a09a","modified":1632995330306},{"_id":"public/archives/2020/09/index.html","hash":"c6d00f43542724ade704bf72ff31aac04156473b","modified":1632995330306},{"_id":"public/archives/2021/index.html","hash":"f70a7941ff187edfde911b42799a0ac7970ee5e2","modified":1632995330306},{"_id":"public/archives/2021/05/index.html","hash":"f246b194960ae79575797d871fd6addc30753b03","modified":1632995330306},{"_id":"public/archives/2021/09/index.html","hash":"52c6e59d25602830ee0365c6653372706858fc42","modified":1632995330306},{"_id":"public/index.html","hash":"45262ba116f06a64445de953af7cfb4bc1850f3e","modified":1632995330306},{"_id":"public/tags/Debian/index.html","hash":"c1db6c60abbf2530cc88ee90fbf345f9a72adce5","modified":1632995330306},{"_id":"public/tags/Linux/index.html","hash":"2ad0c2f770490c71cf21df32e6f190e783712b9e","modified":1632995330306},{"_id":"public/tags/Kali-Linux/index.html","hash":"6de649e09e61e7a69ed4c10dbdba01df64d1db93","modified":1632995330306},{"_id":"public/tags/python/index.html","hash":"3b3d35905a0944689063e879b07aa0565c896e01","modified":1632995330306},{"_id":"public/tags/git/index.html","hash":"e8cf26ff84542c0192a6ed8728a2edda815b3f6f","modified":1632995330306},{"_id":"public/2021/09/30/CPython-zipfile-Code-Tracing/index.html","hash":"830f700267db8d45e0a88dac8f6eae9dedfdd079","modified":1632995330306},{"_id":"public/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1632995330306},{"_id":"public/css/article.css","hash":"f0ee490e1207191946fffc9444f891e9b7ae7289","modified":1632995330306},{"_id":"public/css/mixins.css","hash":"45146e7f4346351cd7f364de344aecf9574475f9","modified":1632995330306},{"_id":"public/css/base.css","hash":"91b6c032be9e146dfd68880fe79f77f5d2771b0f","modified":1632995330306},{"_id":"public/css/style.css","hash":"029be79fde48199c77c76dbaac80cec3715f0bc8","modified":1632995330306},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632995330306},{"_id":"public/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1632995330306},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1632995330306}],"Category":[],"Data":[],"Page":[{"title":"About","description":"Hi there 👋","layout":"about","comments":0,"sidebar":"custom","_content":"\n### Hi there 👋\n\n#### Who am I\n\nJunWei is a security researcher and open-source enthusiast from Taiwan. A paranoid Pythonista and CPython contributor who now focuses on Android reverse engineering and malware analysis. And as a member of the PyCon Taiwan Program Committee, previously presented at Black Hat, DEFCON, HITB, ROOTCON, GrayHat, PyCon Europe/TW/KR/MY/IN. He’s the co-founder of Quark-Engine and the Quark package maintainer on Kali Linux, leading Quark to participate in the GSoC under the Honeynet Project since 2021.\n\nGoogle summer of code 2021 [Mentor](https://www.honeynet.org/gsoc/gsoc-2021/google-summer-of-code-2021-project-ideas#quark)\n\n[My Previous Talks](https://github.com/krnick/talks)\n\nThe projects I am currently working on:\n\n[![ReadMe Card](https://github-readme-stats.vercel.app/api/pin/?username=quark-engine&repo=quark-engine)](https://github.com/quark-engine/quark-engine)\n\n![JunWei Song's github stats](https://github-readme-stats.vercel.app/api?username=krnick&theme=blue-green&show_icons=true)\n\n![visitors](https://visitor-badge.laobi.icu/badge?page_id=krnick.krnick)\n\n[Resume (English Version)](https://www.cakeresume.com/sungboss2004)\n","source":"about/index.md","raw":"---\ntitle: About\ndescription: Hi there 👋\nlayout: about\ncomments: false\nsidebar: custom\n---\n\n### Hi there 👋\n\n#### Who am I\n\nJunWei is a security researcher and open-source enthusiast from Taiwan. A paranoid Pythonista and CPython contributor who now focuses on Android reverse engineering and malware analysis. And as a member of the PyCon Taiwan Program Committee, previously presented at Black Hat, DEFCON, HITB, ROOTCON, GrayHat, PyCon Europe/TW/KR/MY/IN. He’s the co-founder of Quark-Engine and the Quark package maintainer on Kali Linux, leading Quark to participate in the GSoC under the Honeynet Project since 2021.\n\nGoogle summer of code 2021 [Mentor](https://www.honeynet.org/gsoc/gsoc-2021/google-summer-of-code-2021-project-ideas#quark)\n\n[My Previous Talks](https://github.com/krnick/talks)\n\nThe projects I am currently working on:\n\n[![ReadMe Card](https://github-readme-stats.vercel.app/api/pin/?username=quark-engine&repo=quark-engine)](https://github.com/quark-engine/quark-engine)\n\n![JunWei Song's github stats](https://github-readme-stats.vercel.app/api?username=krnick&theme=blue-green&show_icons=true)\n\n![visitors](https://visitor-badge.laobi.icu/badge?page_id=krnick.krnick)\n\n[Resume (English Version)](https://www.cakeresume.com/sungboss2004)\n","date":"2021-09-30T08:34:35.889Z","updated":"2021-09-30T08:34:35.889Z","path":"about/index.html","_id":"cku6r999n0000vjsa5kf0fucb","content":"<h3 id=\"Hi-there-👋\"><a href=\"#Hi-there-👋\" class=\"headerlink\" title=\"Hi there 👋\"></a>Hi there 👋</h3><h4 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"Who am I\"></a>Who am I</h4><p>JunWei is a security researcher and open-source enthusiast from Taiwan. A paranoid Pythonista and CPython contributor who now focuses on Android reverse engineering and malware analysis. And as a member of the PyCon Taiwan Program Committee, previously presented at Black Hat, DEFCON, HITB, ROOTCON, GrayHat, PyCon Europe/TW/KR/MY/IN. He’s the co-founder of Quark-Engine and the Quark package maintainer on Kali Linux, leading Quark to participate in the GSoC under the Honeynet Project since 2021.</p>\n<p>Google summer of code 2021 <a href=\"https://www.honeynet.org/gsoc/gsoc-2021/google-summer-of-code-2021-project-ideas#quark\">Mentor</a></p>\n<p><a href=\"https://github.com/krnick/talks\">My Previous Talks</a></p>\n<p>The projects I am currently working on:</p>\n<p><a href=\"https://github.com/quark-engine/quark-engine\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=quark-engine&repo=quark-engine\" alt=\"ReadMe Card\"></a></p>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=krnick&theme=blue-green&show_icons=true\" alt=\"JunWei Song&#39;s github stats\"></p>\n<p><img src=\"https://visitor-badge.laobi.icu/badge?page_id=krnick.krnick\" alt=\"visitors\"></p>\n<p><a href=\"https://www.cakeresume.com/sungboss2004\">Resume (English Version)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Hi-there-👋\"><a href=\"#Hi-there-👋\" class=\"headerlink\" title=\"Hi there 👋\"></a>Hi there 👋</h3><h4 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"Who am I\"></a>Who am I</h4><p>JunWei is a security researcher and open-source enthusiast from Taiwan. A paranoid Pythonista and CPython contributor who now focuses on Android reverse engineering and malware analysis. And as a member of the PyCon Taiwan Program Committee, previously presented at Black Hat, DEFCON, HITB, ROOTCON, GrayHat, PyCon Europe/TW/KR/MY/IN. He’s the co-founder of Quark-Engine and the Quark package maintainer on Kali Linux, leading Quark to participate in the GSoC under the Honeynet Project since 2021.</p>\n<p>Google summer of code 2021 <a href=\"https://www.honeynet.org/gsoc/gsoc-2021/google-summer-of-code-2021-project-ideas#quark\">Mentor</a></p>\n<p><a href=\"https://github.com/krnick/talks\">My Previous Talks</a></p>\n<p>The projects I am currently working on:</p>\n<p><a href=\"https://github.com/quark-engine/quark-engine\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=quark-engine&repo=quark-engine\" alt=\"ReadMe Card\"></a></p>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=krnick&theme=blue-green&show_icons=true\" alt=\"JunWei Song&#39;s github stats\"></p>\n<p><img src=\"https://visitor-badge.laobi.icu/badge?page_id=krnick.krnick\" alt=\"visitors\"></p>\n<p><a href=\"https://www.cakeresume.com/sungboss2004\">Resume (English Version)</a></p>\n"},{"title":"Tags","date":"2020-09-23T05:06:01.000Z","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2020-09-23 13:06:01\nlayout: tags\ncomments: false\n---\n","updated":"2021-09-30T08:34:35.890Z","path":"tags/index.html","_id":"cku6r999u0002vjsaekx7crdo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","layout":"categories","date":"2020-09-23T05:06:09.000Z","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\nlayout: categories\ndate: 2020-09-23 13:06:09\ncomments: false\n---\n","updated":"2021-09-30T08:34:35.890Z","path":"categories/index.html","_id":"cku6r999w0004vjsa0k960l3z","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CPython zipfile module code tracing for zip bomb vulnerability","date":"2021-09-30T08:39:10.000Z","_content":"\n# Background\n\nI reported a zip bomb vulnerability to the CPython community in 2019. Here are all the interesting resources and ideas.\n\n[Issue Discussion on BPO](https://bugs.python.org/issue36462)\n\n[CVE-2019-9674](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9674)\n\n[Decompression pitfall I wrote for official documentation](https://docs.python.org/3/library/zipfile.html#decompression-pitfalls)\n\n[Pull Request related it](https://github.com/python/cpython/pull/13378)\n\n[PyCon Korea 2019 - Click Click Boom! Bombs Over Our Minds](https://www.youtube.com/watch?v=-S4JVQt6GX4&ab_channel=PyConKorea)\n\n# zipfile analysis\n\nAccording to Black Hat's  [Cara Marie](https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf) research, there are some solutions against Zip Bomb. By limiting the size of the block to be read at a time, if there is still data remaining after the block that needs to be decompressed after reading this block, it is considered that it is possible to be a Zip Bomb.\n\nBelow is [Cara Marie](https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf) code\n\n```python\nimport zlib\ndef decompress(data, maxsize=1024000):\n    dec = zlib.decompressobj()\n    data = dec.decompress(data, maxsize)\n    if dec.unconsumed_tail:\n        raise ValueError(\"Possible bomb\")\n    del dec\n    return data\n```\n\nAs you can see, the strategy to defeating the zip bomb is by limiting a block, in this case, is max size 102400. However, we take a look at the Python standard library, [zipfile](https://github.com/python/cpython/blob/3.9/Lib/zipfile.py).\n\n\n---\n\nAccording to Cara Marie's approach, we try to figure out the difference between zipfile and zlib and **why we can't use zipfile directly for preventing zip bombs**, so we started to study zipfile source code.\n\n\n# [zipfile](https://github.com/python/cpython/blob/master/Lib/zipfile.py)\n\nSince I focus on the zip format and pick the most commonly used algorithm, DEFLATED algorithm. Inside the zipfile, we can see the location of unzipped function, starting at line `702`, getting the zlib object, and finally returning the object.\n\n**[zlib.decompressobj(-15)](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L702-L716)**\n\n\n```python\ndef _get_decompressor(compress_type):\n    if compress_type == ZIP_STORED:\n        return None\n    elif compress_type == ZIP_DEFLATED:\n        return zlib.decompressobj(-15)\n    elif compress_type == ZIP_BZIP2:\n        return bz2.BZ2Decompressor()\n    elif compress_type == ZIP_LZMA:\n        return LZMADecompressor()\n    else:\n        descr = compressor_names.get(compress_type)\n        if descr:\n            raise NotImplementedError(\"compression type %d (%s)\" % (compress_type, descr))\n        else:\n            raise NotImplementedError(\"compression type %d\" % (compress_type,))\n```\n\nFrom the above code, we can know that the zipfile is based on what zlib does. So we have to deep dive into what zlib did?\n\n# [zlib](https://docs.python.org/3/library/zlib.html)\n\nAccording to the zlib documentation\n\n> There are two ways to compression and decompression, .compress() and .decompress() will fit all files into memory at once. In contrast to the method of the object. It using .compressobj() and .decompressobj() which won’t fit into memory at once.\n\nThere are two ways to compress/decompress.\n\n1. .compress() and .decompress() will put the entire file into memory at a time\n2. .compressobj() and .decompressobj() separate the file , compress/decompress one block at a time\n\n---\n\nHowever, the official documentation does not clearly explain how to use the API to decompress files. The purpose of this method is to obtain the file data stream and decompress it through the Low-Level method. And we went back to the zipfile module and found that they had already done the decompression of zlib, so we planned to apply the patch for zipfile first.\n\nIn the way that zipfile belongs to `decompressobj`, we have the first way to accumulate chunks. As long as we can find out where to do the decompression of chunks, we accumulate it and give a threshold. If it exceeds, then consider that it is possible to be the zip bomb.\n\n\n# Get back at the zipfile\n\n1. Starting with the object\n\n[Line 706](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L706)\n```python\nreturn zlib.decompressobj(-15)\n```\n\n[Line 791](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L791)\n\nIt is the place where the class of zlib.decompressobj(-15) object is obtained and initialized.\n\n\nwhich belongs to ZipExtFile class\n```python\n    def __init__(self, fileobj, mode, zipinfo, decrypter=None,close_fileobj=False):\n```\n\nLet's find out what `fileobj` is\n\n[Line 1545](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L1545)\n\n```python\nreturn ZipExtFile(zef_file, mode, zinfo, zd, True)\n```\n\nReturn the class, and use zef_file, then follow zef_file\n\n\n\n[Line 719](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L719)\n\n_SharedFile being initialized\n\n```python\n    def __init__(self, file, pos, close, lock, writing):\n```\n\nHere we know that when zlib is decompressed, you can't start decompressing directly to Streaming, and you need to skip the file encoding in front of the zip file.\n\n[Line 759](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L759)\n\nIn class _Tellable: to initialize the position of the indicator that gets the file descriptor\n```python\n    def __init__(self, fp):\n        self.fp = fp\n        self.offset = 0\n```\n\nand then\n\n[Line 977](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L977-L984)\n\n\n```python\n\n        elif self._compress_type == ZIP_DEFLATED:\n            n = max(n, self.MIN_READ_SIZE)\n            data = self._decompressor.decompress(data, n)\n            self._eof = (self._decompressor.eof or\n                         self._compress_left <= 0 and\n                         not self._decompressor.unconsumed_tail)\n            if self._eof:\n                data += self._decompressor.flush()\n\n```\n\nWe observed that after choosing to use the ZIP_DEFLATED compression algorithm, we did a function max to get n.\n\n# Key Point\n```python\nmax(n, self.MIN_READ_SIZE)\n```\n\nWhen you use zlib.decompressobj as a block, how big is your block?\n, self.MIN_READ_SIZE is preset to 4096 bytes, which is the size of a page in the operating system.\n\n## Cara Marie's solution\n\n```python\nimport zlib\ndef decompress(data, maxsize=1024000):\n    dec = zlib.decompressobj()\n    data = dec.decompress(data, maxsize)\n    if dec.unconsumed_tail:\n        raise ValueError(\"Possible bomb\")\n    del dec\n    return data\n```\n\n## It sets maxsize to 102400 bytes\n\nAccording to the official document\n\n> Decompress.decompress(data, max_length=0)\n> Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in the string. This data should be concatenated to the output produced by any preceding calls to the decompress() method. Some of the input data may be preserved in internal buffers for later processing.\n>\n> If the optional parameter max_length is non-zero then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed, and unconsumed data will be stored in the attribute unconsumed_tail. This byte string must be passed to a subsequent call to decompress() if decompression is to continue. If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty.\n>\n> Changed in version 3.6: max_length can be used as a keyword argument.\n\n\nMax_length represents the file block size that can be read into the memory at a time and is marked with unconsumed_tail to see if any remaining files need to be decompressed.\n\nTherefore, his idea is more than 102400 bytes. If there is any remaining data, it means there may be a zip bomb.\n\n![](https://i.imgur.com/7schHy0.png)\n\n","source":"_posts/CPython-zipfile-Code-Tracing.md","raw":"---\ntitle: CPython zipfile module code tracing for zip bomb vulnerability\ndate: 2021-09-30 16:39:10\ntags:\n---\n\n# Background\n\nI reported a zip bomb vulnerability to the CPython community in 2019. Here are all the interesting resources and ideas.\n\n[Issue Discussion on BPO](https://bugs.python.org/issue36462)\n\n[CVE-2019-9674](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9674)\n\n[Decompression pitfall I wrote for official documentation](https://docs.python.org/3/library/zipfile.html#decompression-pitfalls)\n\n[Pull Request related it](https://github.com/python/cpython/pull/13378)\n\n[PyCon Korea 2019 - Click Click Boom! Bombs Over Our Minds](https://www.youtube.com/watch?v=-S4JVQt6GX4&ab_channel=PyConKorea)\n\n# zipfile analysis\n\nAccording to Black Hat's  [Cara Marie](https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf) research, there are some solutions against Zip Bomb. By limiting the size of the block to be read at a time, if there is still data remaining after the block that needs to be decompressed after reading this block, it is considered that it is possible to be a Zip Bomb.\n\nBelow is [Cara Marie](https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf) code\n\n```python\nimport zlib\ndef decompress(data, maxsize=1024000):\n    dec = zlib.decompressobj()\n    data = dec.decompress(data, maxsize)\n    if dec.unconsumed_tail:\n        raise ValueError(\"Possible bomb\")\n    del dec\n    return data\n```\n\nAs you can see, the strategy to defeating the zip bomb is by limiting a block, in this case, is max size 102400. However, we take a look at the Python standard library, [zipfile](https://github.com/python/cpython/blob/3.9/Lib/zipfile.py).\n\n\n---\n\nAccording to Cara Marie's approach, we try to figure out the difference between zipfile and zlib and **why we can't use zipfile directly for preventing zip bombs**, so we started to study zipfile source code.\n\n\n# [zipfile](https://github.com/python/cpython/blob/master/Lib/zipfile.py)\n\nSince I focus on the zip format and pick the most commonly used algorithm, DEFLATED algorithm. Inside the zipfile, we can see the location of unzipped function, starting at line `702`, getting the zlib object, and finally returning the object.\n\n**[zlib.decompressobj(-15)](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L702-L716)**\n\n\n```python\ndef _get_decompressor(compress_type):\n    if compress_type == ZIP_STORED:\n        return None\n    elif compress_type == ZIP_DEFLATED:\n        return zlib.decompressobj(-15)\n    elif compress_type == ZIP_BZIP2:\n        return bz2.BZ2Decompressor()\n    elif compress_type == ZIP_LZMA:\n        return LZMADecompressor()\n    else:\n        descr = compressor_names.get(compress_type)\n        if descr:\n            raise NotImplementedError(\"compression type %d (%s)\" % (compress_type, descr))\n        else:\n            raise NotImplementedError(\"compression type %d\" % (compress_type,))\n```\n\nFrom the above code, we can know that the zipfile is based on what zlib does. So we have to deep dive into what zlib did?\n\n# [zlib](https://docs.python.org/3/library/zlib.html)\n\nAccording to the zlib documentation\n\n> There are two ways to compression and decompression, .compress() and .decompress() will fit all files into memory at once. In contrast to the method of the object. It using .compressobj() and .decompressobj() which won’t fit into memory at once.\n\nThere are two ways to compress/decompress.\n\n1. .compress() and .decompress() will put the entire file into memory at a time\n2. .compressobj() and .decompressobj() separate the file , compress/decompress one block at a time\n\n---\n\nHowever, the official documentation does not clearly explain how to use the API to decompress files. The purpose of this method is to obtain the file data stream and decompress it through the Low-Level method. And we went back to the zipfile module and found that they had already done the decompression of zlib, so we planned to apply the patch for zipfile first.\n\nIn the way that zipfile belongs to `decompressobj`, we have the first way to accumulate chunks. As long as we can find out where to do the decompression of chunks, we accumulate it and give a threshold. If it exceeds, then consider that it is possible to be the zip bomb.\n\n\n# Get back at the zipfile\n\n1. Starting with the object\n\n[Line 706](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L706)\n```python\nreturn zlib.decompressobj(-15)\n```\n\n[Line 791](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L791)\n\nIt is the place where the class of zlib.decompressobj(-15) object is obtained and initialized.\n\n\nwhich belongs to ZipExtFile class\n```python\n    def __init__(self, fileobj, mode, zipinfo, decrypter=None,close_fileobj=False):\n```\n\nLet's find out what `fileobj` is\n\n[Line 1545](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L1545)\n\n```python\nreturn ZipExtFile(zef_file, mode, zinfo, zd, True)\n```\n\nReturn the class, and use zef_file, then follow zef_file\n\n\n\n[Line 719](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L719)\n\n_SharedFile being initialized\n\n```python\n    def __init__(self, file, pos, close, lock, writing):\n```\n\nHere we know that when zlib is decompressed, you can't start decompressing directly to Streaming, and you need to skip the file encoding in front of the zip file.\n\n[Line 759](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L759)\n\nIn class _Tellable: to initialize the position of the indicator that gets the file descriptor\n```python\n    def __init__(self, fp):\n        self.fp = fp\n        self.offset = 0\n```\n\nand then\n\n[Line 977](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L977-L984)\n\n\n```python\n\n        elif self._compress_type == ZIP_DEFLATED:\n            n = max(n, self.MIN_READ_SIZE)\n            data = self._decompressor.decompress(data, n)\n            self._eof = (self._decompressor.eof or\n                         self._compress_left <= 0 and\n                         not self._decompressor.unconsumed_tail)\n            if self._eof:\n                data += self._decompressor.flush()\n\n```\n\nWe observed that after choosing to use the ZIP_DEFLATED compression algorithm, we did a function max to get n.\n\n# Key Point\n```python\nmax(n, self.MIN_READ_SIZE)\n```\n\nWhen you use zlib.decompressobj as a block, how big is your block?\n, self.MIN_READ_SIZE is preset to 4096 bytes, which is the size of a page in the operating system.\n\n## Cara Marie's solution\n\n```python\nimport zlib\ndef decompress(data, maxsize=1024000):\n    dec = zlib.decompressobj()\n    data = dec.decompress(data, maxsize)\n    if dec.unconsumed_tail:\n        raise ValueError(\"Possible bomb\")\n    del dec\n    return data\n```\n\n## It sets maxsize to 102400 bytes\n\nAccording to the official document\n\n> Decompress.decompress(data, max_length=0)\n> Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in the string. This data should be concatenated to the output produced by any preceding calls to the decompress() method. Some of the input data may be preserved in internal buffers for later processing.\n>\n> If the optional parameter max_length is non-zero then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed, and unconsumed data will be stored in the attribute unconsumed_tail. This byte string must be passed to a subsequent call to decompress() if decompression is to continue. If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty.\n>\n> Changed in version 3.6: max_length can be used as a keyword argument.\n\n\nMax_length represents the file block size that can be read into the memory at a time and is marked with unconsumed_tail to see if any remaining files need to be decompressed.\n\nTherefore, his idea is more than 102400 bytes. If there is any remaining data, it means there may be a zip bomb.\n\n![](https://i.imgur.com/7schHy0.png)\n\n","slug":"CPython-zipfile-Code-Tracing","published":1,"updated":"2021-09-30T09:40:52.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cku6r999q0001vjsaekw4b2v3","content":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><p>I reported a zip bomb vulnerability to the CPython community in 2019. Here are all the interesting resources and ideas.</p>\n<p><a href=\"https://bugs.python.org/issue36462\">Issue Discussion on BPO</a></p>\n<p><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9674\">CVE-2019-9674</a></p>\n<p><a href=\"https://docs.python.org/3/library/zipfile.html#decompression-pitfalls\">Decompression pitfall I wrote for official documentation</a></p>\n<p><a href=\"https://github.com/python/cpython/pull/13378\">Pull Request related it</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=-S4JVQt6GX4&ab_channel=PyConKorea\">PyCon Korea 2019 - Click Click Boom! Bombs Over Our Minds</a></p>\n<h1 id=\"zipfile-analysis\"><a href=\"#zipfile-analysis\" class=\"headerlink\" title=\"zipfile analysis\"></a>zipfile analysis</h1><p>According to Black Hat’s  <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf\">Cara Marie</a> research, there are some solutions against Zip Bomb. By limiting the size of the block to be read at a time, if there is still data remaining after the block that needs to be decompressed after reading this block, it is considered that it is possible to be a Zip Bomb.</p>\n<p>Below is <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf\">Cara Marie</a> code</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decompress</span>(<span class=\"params\">data, maxsize=<span class=\"number\">1024000</span></span>):</span></span><br><span class=\"line\">    dec = zlib.decompressobj()</span><br><span class=\"line\">    data = dec.decompress(data, maxsize)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dec.unconsumed_tail:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;Possible bomb&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> dec</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the strategy to defeating the zip bomb is by limiting a block, in this case, is max size 102400. However, we take a look at the Python standard library, <a href=\"https://github.com/python/cpython/blob/3.9/Lib/zipfile.py\">zipfile</a>.</p>\n<hr>\n<p>According to Cara Marie’s approach, we try to figure out the difference between zipfile and zlib and <strong>why we can’t use zipfile directly for preventing zip bombs</strong>, so we started to study zipfile source code.</p>\n<h1 id=\"zipfile\"><a href=\"#zipfile\" class=\"headerlink\" title=\"zipfile\"></a><a href=\"https://github.com/python/cpython/blob/master/Lib/zipfile.py\">zipfile</a></h1><p>Since I focus on the zip format and pick the most commonly used algorithm, DEFLATED algorithm. Inside the zipfile, we can see the location of unzipped function, starting at line <code>702</code>, getting the zlib object, and finally returning the object.</p>\n<p><strong><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L702-L716\">zlib.decompressobj(-15)</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_decompressor</span>(<span class=\"params\">compress_type</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> compress_type == ZIP_STORED:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_DEFLATED:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zlib.decompressobj(<span class=\"number\">-15</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_BZIP2:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bz2.BZ2Decompressor()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_LZMA:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LZMADecompressor()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        descr = compressor_names.get(compress_type)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> descr:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> NotImplementedError(<span class=\"string\">&quot;compression type %d (%s)&quot;</span> % (compress_type, descr))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> NotImplementedError(<span class=\"string\">&quot;compression type %d&quot;</span> % (compress_type,))</span><br></pre></td></tr></table></figure>\n\n<p>From the above code, we can know that the zipfile is based on what zlib does. So we have to deep dive into what zlib did?</p>\n<h1 id=\"zlib\"><a href=\"#zlib\" class=\"headerlink\" title=\"zlib\"></a><a href=\"https://docs.python.org/3/library/zlib.html\">zlib</a></h1><p>According to the zlib documentation</p>\n<blockquote>\n<p>There are two ways to compression and decompression, .compress() and .decompress() will fit all files into memory at once. In contrast to the method of the object. It using .compressobj() and .decompressobj() which won’t fit into memory at once.</p>\n</blockquote>\n<p>There are two ways to compress/decompress.</p>\n<ol>\n<li>.compress() and .decompress() will put the entire file into memory at a time</li>\n<li>.compressobj() and .decompressobj() separate the file , compress/decompress one block at a time</li>\n</ol>\n<hr>\n<p>However, the official documentation does not clearly explain how to use the API to decompress files. The purpose of this method is to obtain the file data stream and decompress it through the Low-Level method. And we went back to the zipfile module and found that they had already done the decompression of zlib, so we planned to apply the patch for zipfile first.</p>\n<p>In the way that zipfile belongs to <code>decompressobj</code>, we have the first way to accumulate chunks. As long as we can find out where to do the decompression of chunks, we accumulate it and give a threshold. If it exceeds, then consider that it is possible to be the zip bomb.</p>\n<h1 id=\"Get-back-at-the-zipfile\"><a href=\"#Get-back-at-the-zipfile\" class=\"headerlink\" title=\"Get back at the zipfile\"></a>Get back at the zipfile</h1><ol>\n<li>Starting with the object</li>\n</ol>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L706\">Line 706</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> zlib.decompressobj(<span class=\"number\">-15</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L791\">Line 791</a></p>\n<p>It is the place where the class of zlib.decompressobj(-15) object is obtained and initialized.</p>\n<p>which belongs to ZipExtFile class</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, fileobj, mode, zipinfo, decrypter=None,close_fileobj=False</span>):</span></span><br></pre></td></tr></table></figure>\n\n<p>Let’s find out what <code>fileobj</code> is</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L1545\">Line 1545</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> ZipExtFile(zef_file, mode, zinfo, zd, <span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Return the class, and use zef_file, then follow zef_file</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L719\">Line 719</a></p>\n<p>_SharedFile being initialized</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, file, pos, close, lock, writing</span>):</span></span><br></pre></td></tr></table></figure>\n\n<p>Here we know that when zlib is decompressed, you can’t start decompressing directly to Streaming, and you need to skip the file encoding in front of the zip file.</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L759\">Line 759</a></p>\n<p>In class _Tellable: to initialize the position of the indicator that gets the file descriptor</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, fp</span>):</span></span><br><span class=\"line\">    self.fp = fp</span><br><span class=\"line\">    self.offset = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>and then</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L977-L984\">Line 977</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">elif</span> self._compress_type == ZIP_DEFLATED:</span><br><span class=\"line\">    n = max(n, self.MIN_READ_SIZE)</span><br><span class=\"line\">    data = self._decompressor.decompress(data, n)</span><br><span class=\"line\">    self._eof = (self._decompressor.eof <span class=\"keyword\">or</span></span><br><span class=\"line\">                 self._compress_left &lt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">                 <span class=\"keyword\">not</span> self._decompressor.unconsumed_tail)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self._eof:</span><br><span class=\"line\">        data += self._decompressor.flush()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We observed that after choosing to use the ZIP_DEFLATED compression algorithm, we did a function max to get n.</p>\n<h1 id=\"Key-Point\"><a href=\"#Key-Point\" class=\"headerlink\" title=\"Key Point\"></a>Key Point</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(n, self.MIN_READ_SIZE)</span><br></pre></td></tr></table></figure>\n\n<p>When you use zlib.decompressobj as a block, how big is your block?<br>, self.MIN_READ_SIZE is preset to 4096 bytes, which is the size of a page in the operating system.</p>\n<h2 id=\"Cara-Marie’s-solution\"><a href=\"#Cara-Marie’s-solution\" class=\"headerlink\" title=\"Cara Marie’s solution\"></a>Cara Marie’s solution</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decompress</span>(<span class=\"params\">data, maxsize=<span class=\"number\">1024000</span></span>):</span></span><br><span class=\"line\">    dec = zlib.decompressobj()</span><br><span class=\"line\">    data = dec.decompress(data, maxsize)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dec.unconsumed_tail:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;Possible bomb&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> dec</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"It-sets-maxsize-to-102400-bytes\"><a href=\"#It-sets-maxsize-to-102400-bytes\" class=\"headerlink\" title=\"It sets maxsize to 102400 bytes\"></a>It sets maxsize to 102400 bytes</h2><p>According to the official document</p>\n<blockquote>\n<p>Decompress.decompress(data, max_length=0)<br>Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in the string. This data should be concatenated to the output produced by any preceding calls to the decompress() method. Some of the input data may be preserved in internal buffers for later processing.</p>\n<p>If the optional parameter max_length is non-zero then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed, and unconsumed data will be stored in the attribute unconsumed_tail. This byte string must be passed to a subsequent call to decompress() if decompression is to continue. If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty.</p>\n<p>Changed in version 3.6: max_length can be used as a keyword argument.</p>\n</blockquote>\n<p>Max_length represents the file block size that can be read into the memory at a time and is marked with unconsumed_tail to see if any remaining files need to be decompressed.</p>\n<p>Therefore, his idea is more than 102400 bytes. If there is any remaining data, it means there may be a zip bomb.</p>\n<p><img src=\"https://i.imgur.com/7schHy0.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><p>I reported a zip bomb vulnerability to the CPython community in 2019. Here are all the interesting resources and ideas.</p>\n<p><a href=\"https://bugs.python.org/issue36462\">Issue Discussion on BPO</a></p>\n<p><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9674\">CVE-2019-9674</a></p>\n<p><a href=\"https://docs.python.org/3/library/zipfile.html#decompression-pitfalls\">Decompression pitfall I wrote for official documentation</a></p>\n<p><a href=\"https://github.com/python/cpython/pull/13378\">Pull Request related it</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=-S4JVQt6GX4&ab_channel=PyConKorea\">PyCon Korea 2019 - Click Click Boom! Bombs Over Our Minds</a></p>\n<h1 id=\"zipfile-analysis\"><a href=\"#zipfile-analysis\" class=\"headerlink\" title=\"zipfile analysis\"></a>zipfile analysis</h1><p>According to Black Hat’s  <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf\">Cara Marie</a> research, there are some solutions against Zip Bomb. By limiting the size of the block to be read at a time, if there is still data remaining after the block that needs to be decompressed after reading this block, it is considered that it is possible to be a Zip Bomb.</p>\n<p>Below is <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf\">Cara Marie</a> code</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decompress</span>(<span class=\"params\">data, maxsize=<span class=\"number\">1024000</span></span>):</span></span><br><span class=\"line\">    dec = zlib.decompressobj()</span><br><span class=\"line\">    data = dec.decompress(data, maxsize)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dec.unconsumed_tail:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;Possible bomb&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> dec</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the strategy to defeating the zip bomb is by limiting a block, in this case, is max size 102400. However, we take a look at the Python standard library, <a href=\"https://github.com/python/cpython/blob/3.9/Lib/zipfile.py\">zipfile</a>.</p>\n<hr>\n<p>According to Cara Marie’s approach, we try to figure out the difference between zipfile and zlib and <strong>why we can’t use zipfile directly for preventing zip bombs</strong>, so we started to study zipfile source code.</p>\n<h1 id=\"zipfile\"><a href=\"#zipfile\" class=\"headerlink\" title=\"zipfile\"></a><a href=\"https://github.com/python/cpython/blob/master/Lib/zipfile.py\">zipfile</a></h1><p>Since I focus on the zip format and pick the most commonly used algorithm, DEFLATED algorithm. Inside the zipfile, we can see the location of unzipped function, starting at line <code>702</code>, getting the zlib object, and finally returning the object.</p>\n<p><strong><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L702-L716\">zlib.decompressobj(-15)</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_decompressor</span>(<span class=\"params\">compress_type</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> compress_type == ZIP_STORED:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_DEFLATED:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zlib.decompressobj(<span class=\"number\">-15</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_BZIP2:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bz2.BZ2Decompressor()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_LZMA:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LZMADecompressor()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        descr = compressor_names.get(compress_type)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> descr:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> NotImplementedError(<span class=\"string\">&quot;compression type %d (%s)&quot;</span> % (compress_type, descr))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> NotImplementedError(<span class=\"string\">&quot;compression type %d&quot;</span> % (compress_type,))</span><br></pre></td></tr></table></figure>\n\n<p>From the above code, we can know that the zipfile is based on what zlib does. So we have to deep dive into what zlib did?</p>\n<h1 id=\"zlib\"><a href=\"#zlib\" class=\"headerlink\" title=\"zlib\"></a><a href=\"https://docs.python.org/3/library/zlib.html\">zlib</a></h1><p>According to the zlib documentation</p>\n<blockquote>\n<p>There are two ways to compression and decompression, .compress() and .decompress() will fit all files into memory at once. In contrast to the method of the object. It using .compressobj() and .decompressobj() which won’t fit into memory at once.</p>\n</blockquote>\n<p>There are two ways to compress/decompress.</p>\n<ol>\n<li>.compress() and .decompress() will put the entire file into memory at a time</li>\n<li>.compressobj() and .decompressobj() separate the file , compress/decompress one block at a time</li>\n</ol>\n<hr>\n<p>However, the official documentation does not clearly explain how to use the API to decompress files. The purpose of this method is to obtain the file data stream and decompress it through the Low-Level method. And we went back to the zipfile module and found that they had already done the decompression of zlib, so we planned to apply the patch for zipfile first.</p>\n<p>In the way that zipfile belongs to <code>decompressobj</code>, we have the first way to accumulate chunks. As long as we can find out where to do the decompression of chunks, we accumulate it and give a threshold. If it exceeds, then consider that it is possible to be the zip bomb.</p>\n<h1 id=\"Get-back-at-the-zipfile\"><a href=\"#Get-back-at-the-zipfile\" class=\"headerlink\" title=\"Get back at the zipfile\"></a>Get back at the zipfile</h1><ol>\n<li>Starting with the object</li>\n</ol>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L706\">Line 706</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> zlib.decompressobj(<span class=\"number\">-15</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L791\">Line 791</a></p>\n<p>It is the place where the class of zlib.decompressobj(-15) object is obtained and initialized.</p>\n<p>which belongs to ZipExtFile class</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, fileobj, mode, zipinfo, decrypter=None,close_fileobj=False</span>):</span></span><br></pre></td></tr></table></figure>\n\n<p>Let’s find out what <code>fileobj</code> is</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L1545\">Line 1545</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> ZipExtFile(zef_file, mode, zinfo, zd, <span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Return the class, and use zef_file, then follow zef_file</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L719\">Line 719</a></p>\n<p>_SharedFile being initialized</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, file, pos, close, lock, writing</span>):</span></span><br></pre></td></tr></table></figure>\n\n<p>Here we know that when zlib is decompressed, you can’t start decompressing directly to Streaming, and you need to skip the file encoding in front of the zip file.</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L759\">Line 759</a></p>\n<p>In class _Tellable: to initialize the position of the indicator that gets the file descriptor</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, fp</span>):</span></span><br><span class=\"line\">    self.fp = fp</span><br><span class=\"line\">    self.offset = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>and then</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L977-L984\">Line 977</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">elif</span> self._compress_type == ZIP_DEFLATED:</span><br><span class=\"line\">    n = max(n, self.MIN_READ_SIZE)</span><br><span class=\"line\">    data = self._decompressor.decompress(data, n)</span><br><span class=\"line\">    self._eof = (self._decompressor.eof <span class=\"keyword\">or</span></span><br><span class=\"line\">                 self._compress_left &lt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">                 <span class=\"keyword\">not</span> self._decompressor.unconsumed_tail)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self._eof:</span><br><span class=\"line\">        data += self._decompressor.flush()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We observed that after choosing to use the ZIP_DEFLATED compression algorithm, we did a function max to get n.</p>\n<h1 id=\"Key-Point\"><a href=\"#Key-Point\" class=\"headerlink\" title=\"Key Point\"></a>Key Point</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(n, self.MIN_READ_SIZE)</span><br></pre></td></tr></table></figure>\n\n<p>When you use zlib.decompressobj as a block, how big is your block?<br>, self.MIN_READ_SIZE is preset to 4096 bytes, which is the size of a page in the operating system.</p>\n<h2 id=\"Cara-Marie’s-solution\"><a href=\"#Cara-Marie’s-solution\" class=\"headerlink\" title=\"Cara Marie’s solution\"></a>Cara Marie’s solution</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decompress</span>(<span class=\"params\">data, maxsize=<span class=\"number\">1024000</span></span>):</span></span><br><span class=\"line\">    dec = zlib.decompressobj()</span><br><span class=\"line\">    data = dec.decompress(data, maxsize)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dec.unconsumed_tail:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;Possible bomb&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> dec</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"It-sets-maxsize-to-102400-bytes\"><a href=\"#It-sets-maxsize-to-102400-bytes\" class=\"headerlink\" title=\"It sets maxsize to 102400 bytes\"></a>It sets maxsize to 102400 bytes</h2><p>According to the official document</p>\n<blockquote>\n<p>Decompress.decompress(data, max_length=0)<br>Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in the string. This data should be concatenated to the output produced by any preceding calls to the decompress() method. Some of the input data may be preserved in internal buffers for later processing.</p>\n<p>If the optional parameter max_length is non-zero then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed, and unconsumed data will be stored in the attribute unconsumed_tail. This byte string must be passed to a subsequent call to decompress() if decompression is to continue. If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty.</p>\n<p>Changed in version 3.6: max_length can be used as a keyword argument.</p>\n</blockquote>\n<p>Max_length represents the file block size that can be read into the memory at a time and is marked with unconsumed_tail to see if any remaining files need to be decompressed.</p>\n<p>Therefore, his idea is more than 102400 bytes. If there is any remaining data, it means there may be a zip bomb.</p>\n<p><img src=\"https://i.imgur.com/7schHy0.png\"></p>\n"},{"title":"Debian Packaging","date":"2021-05-03T08:10:42.000Z","_content":"\n前陣子要將 Quark 上傳至 [Kali Linux](https://www.kali.org/)，需要包成一個 Debian 的安裝檔案費了不少力氣，以下紀錄一下該如何打包一個 Python 專案至 Debian 的 .deb 安裝檔案。\n\n[Kali Linux issue 0007121](https://bugs.kali.org/view.php?id=7121)\n\n## Creating the Debian files\n\nDebian套件強制規定 debian 目錄下需要有以下四個檔案\n\n* control\n* copyright\n* changelog\n* rules\n\n細節可參考 Quark 完成後的 [Debian-目錄](https://github.com/quark-engine/quark-engine/tree/master/debian)\n\n---\n\n### 產生 debian 目錄\n\n使用 `dh_make` 可以自動幫你產生所需的這四個檔案，`quark-engine_21.02.2.orig.tar.gz` 為你的專案壓縮檔案。\n\n```bash=\ndh_make -p quark-engine_21.02.2 -f quark-engine_21.02.2.orig.tar.gz \n\nrm *.ex *.EX README.* *.docs\n```\n\n## System Requirements\n\n\n更新環境\n\n```bash=\necho \"deb http://http.kali.org/kali kali-rolling main non-free contrib\" | sudo tee /etc/apt/sources.list\n\nsudo apt-get update\n```\n\n安裝需要的檔案\n```bash=\nsudo apt install -y packaging-dev apt-file gitk mr\n\nsudo apt-get install -y devscripts debhelper dh-make git-buildpackage sbuild dh-python python3-all\n```\n\n設定 sbuild，完成後重新登入\n\n```bash=\nsudo mkdir -p /srv/chroots/\ncd /srv/chroots/\n\nsudo sbuild-createchroot --keyring=/usr/share/keyrings/kali-archive-keyring.gpg --arch=amd64 --components=main,contrib,non-free --include=kali-archive-keyring kali-dev kali-dev-amd64-sbuild http://http.kali.org/kali\n\necho \"source-root-groups=root,sbuild\" | sudo tee -a /etc/schroot/chroot.d/kali-dev-amd64-sbuild*\n\nsudo sbuild-adduser $USER\n```\n\n\n## Importing\n\n匯入你的專案\n\n```bash=\n\nmkdir -p ~/kali/packages/quark-engine ~/kali/upstream/\n\nwget https://github.com/quark-engine/quark-engine/archive/refs/tags/v21.4.3.tar.gz  -O ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz\n\ncd /home/kali/kali/packages/quark-engine\n\ngit init\n\ngbp import-orig ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz\n```\n\n## Build Package\n\n產生 `.deb` 檔案\n\n```bash=\ngbp buildpackage --git-builder=sbuild\n```\n\n## Reference\n\nhttps://www.kali.org/docs/development/public-packaging/\nhttps://www.kali.org/docs/development/intro-to-packaging-example/\nhttps://www.kali.org/docs/development/setting-up-packaging-system/\nhttps://www.kali.org/docs/development/advanced-packaging-example/","source":"_posts/Debian-Packaging.md","raw":"---\ntitle: Debian Packaging\ndate: 2021-05-03 16:10:42\ntags:\n- Debian\n- Linux\n- Kali Linux\n---\n\n前陣子要將 Quark 上傳至 [Kali Linux](https://www.kali.org/)，需要包成一個 Debian 的安裝檔案費了不少力氣，以下紀錄一下該如何打包一個 Python 專案至 Debian 的 .deb 安裝檔案。\n\n[Kali Linux issue 0007121](https://bugs.kali.org/view.php?id=7121)\n\n## Creating the Debian files\n\nDebian套件強制規定 debian 目錄下需要有以下四個檔案\n\n* control\n* copyright\n* changelog\n* rules\n\n細節可參考 Quark 完成後的 [Debian-目錄](https://github.com/quark-engine/quark-engine/tree/master/debian)\n\n---\n\n### 產生 debian 目錄\n\n使用 `dh_make` 可以自動幫你產生所需的這四個檔案，`quark-engine_21.02.2.orig.tar.gz` 為你的專案壓縮檔案。\n\n```bash=\ndh_make -p quark-engine_21.02.2 -f quark-engine_21.02.2.orig.tar.gz \n\nrm *.ex *.EX README.* *.docs\n```\n\n## System Requirements\n\n\n更新環境\n\n```bash=\necho \"deb http://http.kali.org/kali kali-rolling main non-free contrib\" | sudo tee /etc/apt/sources.list\n\nsudo apt-get update\n```\n\n安裝需要的檔案\n```bash=\nsudo apt install -y packaging-dev apt-file gitk mr\n\nsudo apt-get install -y devscripts debhelper dh-make git-buildpackage sbuild dh-python python3-all\n```\n\n設定 sbuild，完成後重新登入\n\n```bash=\nsudo mkdir -p /srv/chroots/\ncd /srv/chroots/\n\nsudo sbuild-createchroot --keyring=/usr/share/keyrings/kali-archive-keyring.gpg --arch=amd64 --components=main,contrib,non-free --include=kali-archive-keyring kali-dev kali-dev-amd64-sbuild http://http.kali.org/kali\n\necho \"source-root-groups=root,sbuild\" | sudo tee -a /etc/schroot/chroot.d/kali-dev-amd64-sbuild*\n\nsudo sbuild-adduser $USER\n```\n\n\n## Importing\n\n匯入你的專案\n\n```bash=\n\nmkdir -p ~/kali/packages/quark-engine ~/kali/upstream/\n\nwget https://github.com/quark-engine/quark-engine/archive/refs/tags/v21.4.3.tar.gz  -O ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz\n\ncd /home/kali/kali/packages/quark-engine\n\ngit init\n\ngbp import-orig ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz\n```\n\n## Build Package\n\n產生 `.deb` 檔案\n\n```bash=\ngbp buildpackage --git-builder=sbuild\n```\n\n## Reference\n\nhttps://www.kali.org/docs/development/public-packaging/\nhttps://www.kali.org/docs/development/intro-to-packaging-example/\nhttps://www.kali.org/docs/development/setting-up-packaging-system/\nhttps://www.kali.org/docs/development/advanced-packaging-example/","slug":"Debian-Packaging","published":1,"updated":"2021-09-30T08:34:35.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cku6r999u0003vjsa39878q55","content":"<p>前陣子要將 Quark 上傳至 <a href=\"https://www.kali.org/\">Kali Linux</a>，需要包成一個 Debian 的安裝檔案費了不少力氣，以下紀錄一下該如何打包一個 Python 專案至 Debian 的 .deb 安裝檔案。</p>\n<p><a href=\"https://bugs.kali.org/view.php?id=7121\">Kali Linux issue 0007121</a></p>\n<h2 id=\"Creating-the-Debian-files\"><a href=\"#Creating-the-Debian-files\" class=\"headerlink\" title=\"Creating the Debian files\"></a>Creating the Debian files</h2><p>Debian套件強制規定 debian 目錄下需要有以下四個檔案</p>\n<ul>\n<li>control</li>\n<li>copyright</li>\n<li>changelog</li>\n<li>rules</li>\n</ul>\n<p>細節可參考 Quark 完成後的 <a href=\"https://github.com/quark-engine/quark-engine/tree/master/debian\">Debian-目錄</a></p>\n<hr>\n<h3 id=\"產生-debian-目錄\"><a href=\"#產生-debian-目錄\" class=\"headerlink\" title=\"產生 debian 目錄\"></a>產生 debian 目錄</h3><p>使用 <code>dh_make</code> 可以自動幫你產生所需的這四個檔案，<code>quark-engine_21.02.2.orig.tar.gz</code> 為你的專案壓縮檔案。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dh_make -p quark-engine_21.02.2 -f quark-engine_21.02.2.orig.tar.gz </span><br><span class=\"line\"></span><br><span class=\"line\">rm *.ex *.EX README.* *.docs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"System-Requirements\"><a href=\"#System-Requirements\" class=\"headerlink\" title=\"System Requirements\"></a>System Requirements</h2><p>更新環境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://http.kali.org/kali kali-rolling main non-free contrib&quot;</span> | sudo tee /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<p>安裝需要的檔案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install -y packaging-dev apt-file gitk mr</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install -y devscripts debhelper dh-make git-buildpackage sbuild dh-python python3-all</span><br></pre></td></tr></table></figure>\n\n<p>設定 sbuild，完成後重新登入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /srv/chroots/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /srv/chroots/</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sbuild-createchroot --keyring=/usr/share/keyrings/kali-archive-keyring.gpg --arch=amd64 --components=main,contrib,non-free --include=kali-archive-keyring kali-dev kali-dev-amd64-sbuild http://http.kali.org/kali</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source-root-groups=root,sbuild&quot;</span> | sudo tee -a /etc/schroot/chroot.d/kali-dev-amd64-sbuild*</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sbuild-adduser <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Importing\"><a href=\"#Importing\" class=\"headerlink\" title=\"Importing\"></a>Importing</h2><p>匯入你的專案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mkdir -p ~/kali/packages/quark-engine ~/kali/upstream/</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/quark-engine/quark-engine/archive/refs/tags/v21.4.3.tar.gz  -O ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/kali/kali/packages/quark-engine</span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\">gbp import-orig ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Build-Package\"><a href=\"#Build-Package\" class=\"headerlink\" title=\"Build Package\"></a>Build Package</h2><p>產生 <code>.deb</code> 檔案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gbp buildpackage --git-builder=sbuild</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.kali.org/docs/development/public-packaging/\">https://www.kali.org/docs/development/public-packaging/</a><br><a href=\"https://www.kali.org/docs/development/intro-to-packaging-example/\">https://www.kali.org/docs/development/intro-to-packaging-example/</a><br><a href=\"https://www.kali.org/docs/development/setting-up-packaging-system/\">https://www.kali.org/docs/development/setting-up-packaging-system/</a><br><a href=\"https://www.kali.org/docs/development/advanced-packaging-example/\">https://www.kali.org/docs/development/advanced-packaging-example/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前陣子要將 Quark 上傳至 <a href=\"https://www.kali.org/\">Kali Linux</a>，需要包成一個 Debian 的安裝檔案費了不少力氣，以下紀錄一下該如何打包一個 Python 專案至 Debian 的 .deb 安裝檔案。</p>\n<p><a href=\"https://bugs.kali.org/view.php?id=7121\">Kali Linux issue 0007121</a></p>\n<h2 id=\"Creating-the-Debian-files\"><a href=\"#Creating-the-Debian-files\" class=\"headerlink\" title=\"Creating the Debian files\"></a>Creating the Debian files</h2><p>Debian套件強制規定 debian 目錄下需要有以下四個檔案</p>\n<ul>\n<li>control</li>\n<li>copyright</li>\n<li>changelog</li>\n<li>rules</li>\n</ul>\n<p>細節可參考 Quark 完成後的 <a href=\"https://github.com/quark-engine/quark-engine/tree/master/debian\">Debian-目錄</a></p>\n<hr>\n<h3 id=\"產生-debian-目錄\"><a href=\"#產生-debian-目錄\" class=\"headerlink\" title=\"產生 debian 目錄\"></a>產生 debian 目錄</h3><p>使用 <code>dh_make</code> 可以自動幫你產生所需的這四個檔案，<code>quark-engine_21.02.2.orig.tar.gz</code> 為你的專案壓縮檔案。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dh_make -p quark-engine_21.02.2 -f quark-engine_21.02.2.orig.tar.gz </span><br><span class=\"line\"></span><br><span class=\"line\">rm *.ex *.EX README.* *.docs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"System-Requirements\"><a href=\"#System-Requirements\" class=\"headerlink\" title=\"System Requirements\"></a>System Requirements</h2><p>更新環境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://http.kali.org/kali kali-rolling main non-free contrib&quot;</span> | sudo tee /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<p>安裝需要的檔案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install -y packaging-dev apt-file gitk mr</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install -y devscripts debhelper dh-make git-buildpackage sbuild dh-python python3-all</span><br></pre></td></tr></table></figure>\n\n<p>設定 sbuild，完成後重新登入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /srv/chroots/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /srv/chroots/</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sbuild-createchroot --keyring=/usr/share/keyrings/kali-archive-keyring.gpg --arch=amd64 --components=main,contrib,non-free --include=kali-archive-keyring kali-dev kali-dev-amd64-sbuild http://http.kali.org/kali</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;source-root-groups=root,sbuild&quot;</span> | sudo tee -a /etc/schroot/chroot.d/kali-dev-amd64-sbuild*</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sbuild-adduser <span class=\"variable\">$USER</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Importing\"><a href=\"#Importing\" class=\"headerlink\" title=\"Importing\"></a>Importing</h2><p>匯入你的專案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mkdir -p ~/kali/packages/quark-engine ~/kali/upstream/</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/quark-engine/quark-engine/archive/refs/tags/v21.4.3.tar.gz  -O ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/kali/kali/packages/quark-engine</span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\">gbp import-orig ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Build-Package\"><a href=\"#Build-Package\" class=\"headerlink\" title=\"Build Package\"></a>Build Package</h2><p>產生 <code>.deb</code> 檔案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gbp buildpackage --git-builder=sbuild</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.kali.org/docs/development/public-packaging/\">https://www.kali.org/docs/development/public-packaging/</a><br><a href=\"https://www.kali.org/docs/development/intro-to-packaging-example/\">https://www.kali.org/docs/development/intro-to-packaging-example/</a><br><a href=\"https://www.kali.org/docs/development/setting-up-packaging-system/\">https://www.kali.org/docs/development/setting-up-packaging-system/</a><br><a href=\"https://www.kali.org/docs/development/advanced-packaging-example/\">https://www.kali.org/docs/development/advanced-packaging-example/</a></p>\n"},{"title":"pipenv","date":"2020-09-24T06:15:06.000Z","_content":"\n# Install from github\n```bash=\npipenv install -e git+https://github.com/quark-engine/quark-engine.git#egg=quark-engine\n```\n* First \"quark-enigne\": user\n* Second \"quark-engine\": repo\n* @develop: The branch what you want to install\n* #egg=quark-engine: The package name that will be recorded in pipenv\n","source":"_posts/pipenv.md","raw":"---\ntitle: [pipenv]\ndate: 2020-09-24 14:15:06\ntags:\n- python\n- git\n---\n\n# Install from github\n```bash=\npipenv install -e git+https://github.com/quark-engine/quark-engine.git#egg=quark-engine\n```\n* First \"quark-enigne\": user\n* Second \"quark-engine\": repo\n* @develop: The branch what you want to install\n* #egg=quark-engine: The package name that will be recorded in pipenv\n","slug":"pipenv","published":1,"updated":"2021-09-30T08:34:35.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cku6r999w0005vjsa5fkk4qpj","content":"<h1 id=\"Install-from-github\"><a href=\"#Install-from-github\" class=\"headerlink\" title=\"Install from github\"></a>Install from github</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv install -e git+https://github.com/quark-engine/quark-engine.git<span class=\"comment\">#egg=quark-engine</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>First “quark-enigne”: user</li>\n<li>Second “quark-engine”: repo</li>\n<li>@develop: The branch what you want to install</li>\n<li>#egg=quark-engine: The package name that will be recorded in pipenv</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Install-from-github\"><a href=\"#Install-from-github\" class=\"headerlink\" title=\"Install from github\"></a>Install from github</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv install -e git+https://github.com/quark-engine/quark-engine.git<span class=\"comment\">#egg=quark-engine</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>First “quark-enigne”: user</li>\n<li>Second “quark-engine”: repo</li>\n<li>@develop: The branch what you want to install</li>\n<li>#egg=quark-engine: The package name that will be recorded in pipenv</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cku6r999u0003vjsa39878q55","tag_id":"cku6r999y0006vjsa578hgarj","_id":"cku6r99a1000avjsab2tqd5qg"},{"post_id":"cku6r999u0003vjsa39878q55","tag_id":"cku6r99a00007vjsa5ghuc94a","_id":"cku6r99a1000bvjsab18680wa"},{"post_id":"cku6r999u0003vjsa39878q55","tag_id":"cku6r99a00008vjsa6lh4c73g","_id":"cku6r99a2000dvjsa4gds102q"},{"post_id":"cku6r999w0005vjsa5fkk4qpj","tag_id":"cku6r99a10009vjsafh2634db","_id":"cku6r99a2000evjsa0w8e3cjh"},{"post_id":"cku6r999w0005vjsa5fkk4qpj","tag_id":"cku6r99a2000cvjsa7cjj54o4","_id":"cku6r99a2000fvjsahyj6bp63"}],"Tag":[{"name":"Debian","_id":"cku6r999y0006vjsa578hgarj"},{"name":"Linux","_id":"cku6r99a00007vjsa5ghuc94a"},{"name":"Kali Linux","_id":"cku6r99a00008vjsa6lh4c73g"},{"name":"python","_id":"cku6r99a10009vjsafh2634db"},{"name":"git","_id":"cku6r99a2000cvjsa7cjj54o4"}]}}
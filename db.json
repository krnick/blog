{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/clean-blog/source/css/article.styl","path":"css/article.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/base.styl","path":"css/base.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/mixins.styl","path":"css/mixins.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/css/variables.styl","path":"css/variables.styl","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":1,"renderable":1},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/clean-blog/LICENSE","hash":"8726b416df4f067cff579e859f05c4b594b8be09","modified":1633589357183},{"_id":"themes/clean-blog/README.md","hash":"3663228602b0a5f8941e49e7851698ea13a07eb3","modified":1633589357184},{"_id":"themes/clean-blog/_config.yml","hash":"ed09bb8bc55dc80af17c7db52dd743bbea41f068","modified":1633589357184},{"_id":"themes/clean-blog/languages/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1633589357184},{"_id":"themes/clean-blog/languages/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1633589357184},{"_id":"themes/clean-blog/languages/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1633589357184},{"_id":"themes/clean-blog/languages/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1633589357185},{"_id":"themes/clean-blog/languages/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1633589357186},{"_id":"themes/clean-blog/languages/ko.yml","hash":"40b97194caa097cbc037a79c86530be132743920","modified":1633589357185},{"_id":"themes/clean-blog/languages/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1633589357186},{"_id":"themes/clean-blog/languages/fr.yml","hash":"e9e6f7cb362ebb7997f11027498a2748fe3bac95","modified":1633589357185},{"_id":"themes/clean-blog/languages/pt.yml","hash":"1d0c3689eb32fe13f37f8f6f303af7624ebfbaf0","modified":1633589357186},{"_id":"themes/clean-blog/languages/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1633589357186},{"_id":"themes/clean-blog/languages/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1633589357187},{"_id":"themes/clean-blog/layout/archive.ejs","hash":"3492fc8ec76f49eb05fa4c0d48db46b76f04805c","modified":1633589357191},{"_id":"themes/clean-blog/layout/index.ejs","hash":"41b0fec1a9049518040dc6fb4857659485ed5136","modified":1633589357191},{"_id":"themes/clean-blog/layout/layout.ejs","hash":"da2f9018047924ddaf376aee5996c7ddc06cebc1","modified":1633589357192},{"_id":"themes/clean-blog/layout/page.ejs","hash":"9e6c5704b26a6732a42f01bd09635b3b81909403","modified":1633589357192},{"_id":"themes/clean-blog/languages/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1633589357187},{"_id":"themes/clean-blog/layout/post.ejs","hash":"38382e9bbeb6b8d2eafbd53fff2984111f524c1a","modified":1633589357192},{"_id":"themes/clean-blog/source/css/article.styl","hash":"f5294d7a3d6127fcb287de3ff0c12aebb1766c7b","modified":1633589357194},{"_id":"themes/clean-blog/source/css/base.styl","hash":"0b54825903d08b5f7f7fe95ef4261c90e980abdb","modified":1633589357194},{"_id":"themes/clean-blog/source/css/mixins.styl","hash":"892f55e8a71f2e23a52e48e217dad3303bbad913","modified":1633589357194},{"_id":"themes/clean-blog/source/css/style.styl","hash":"c40dc495a41007d21c59f342ee42b2d31d7b5ff4","modified":1633589357195},{"_id":"themes/clean-blog/source/css/variables.styl","hash":"cd82df5ca8dfbcfec12d833f01adfac00878e835","modified":1633589357195},{"_id":"themes/clean-blog/layout/_partial/after-footer.ejs","hash":"80970a6cfbf9b1abe0c472636b321a9be08fdc43","modified":1633589357187},{"_id":"themes/clean-blog/layout/_partial/article-archive.ejs","hash":"3d8d98c6545b8332a6d6ed4f8b00327df03ea945","modified":1633589357187},{"_id":"themes/clean-blog/layout/_partial/article-categories.ejs","hash":"5a0bf5a20f670621d8013c9b9d7976b45c8aa80f","modified":1633589357188},{"_id":"themes/clean-blog/layout/_partial/article-full.ejs","hash":"f78ff5eedf9045148ee255d5387a05a7000a7a47","modified":1633589357188},{"_id":"themes/clean-blog/layout/_partial/article-index.ejs","hash":"e433df4e245e2d4c628052c6e59966563542d94d","modified":1633589357189},{"_id":"themes/clean-blog/layout/_partial/article-tags.ejs","hash":"6136434be09056c1466149cecb3cc2e80d107999","modified":1633589357189},{"_id":"themes/clean-blog/layout/_partial/comments.ejs","hash":"3fedb75436439d1d6979b7e4d20d48a593e12be4","modified":1633589357189},{"_id":"themes/clean-blog/layout/_partial/footer.ejs","hash":"d252fb1a41890e6481bb054f9cc4ceec3c0b0ed9","modified":1633589357189},{"_id":"themes/clean-blog/layout/_partial/gallery.ejs","hash":"21e4f28909f4a79ff7d9f10bdfef6a8cb11632bf","modified":1633589357190},{"_id":"themes/clean-blog/layout/_partial/head.ejs","hash":"3ccfc84e3ed67415fe71a1767d5e77a6b1f84a7a","modified":1633589357190},{"_id":"themes/clean-blog/layout/_partial/google-analytics.ejs","hash":"4e6e8de9becea5a1636a4dcadcf7a10c06e2426e","modified":1633589357190},{"_id":"themes/clean-blog/layout/_partial/menu.ejs","hash":"ba299316400499e9ede154e9627cafb7ce411888","modified":1633589357190},{"_id":"themes/clean-blog/layout/_partial/tag-category-index.ejs","hash":"10cdc1b7866999c714a666557c150d2c79c1fba9","modified":1633589357191},{"_id":"themes/clean-blog/source/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1633589357198},{"_id":"themes/clean-blog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1633589357191},{"_id":"themes/clean-blog/source/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1633589357201},{"_id":"source/_posts/Debian-Packaging.md","hash":"e755453f0837ef1760c4d970fd2d25ce4813b5ed","modified":1633589755037},{"_id":"source/_posts/How-to-draft-a-new-release-on-PyPi-with-Github-Action.md","hash":"342335472465bce8c298aebc655af10b46b8b6f4","modified":1633589686874},{"_id":"source/_posts/Roaming-Mantis-with-Quark-Engine.md","hash":"0beca7652ae9f9de87463746becaf6a7a62126e6","modified":1633589357181},{"_id":"source/_posts/pipenv.md","hash":"e13b8b338ba7e32b4a55fab4924b4f67b7e14192","modified":1633589357182},{"_id":"source/about/index.md","hash":"14b0836991e175e763cf02e43b0e18ea574e6682","modified":1633589357182},{"_id":"source/categories/index.md","hash":"8e6b60e5168f98481fa8d3bb63d75296743a9a5c","modified":1633589357182},{"_id":"source/_posts/CPython-zipfile-Code-Tracing.md","hash":"00d63e3b6b96fbfd0a557a7b6f3b253dfa924717","modified":1633589357164},{"_id":"source/tags/index.md","hash":"1bb21982e938f3225ba50ec758db4089724719b5","modified":1633589357183},{"_id":"source/_posts/.idea/_posts.iml","hash":"f223b4ce8a5c906ec7d06d73d942c033b0b45271","modified":1633589357158},{"_id":"source/_posts/.idea/misc.xml","hash":"c4670bd34d32755c8a349b3b32400b5dc3ee2e87","modified":1633589357158},{"_id":"source/_posts/.idea/modules.xml","hash":"6abd6dcb985048745c9214d67295bdf1597307ee","modified":1633589357159},{"_id":"source/_posts/.idea/workspace.xml","hash":"3b9f444ac1a363ed4e3eea8aace853e5db51f6de","modified":1633589357159},{"_id":"source/_posts/.idea/inspectionProfiles/profiles_settings.xml","hash":"123097fe0d1ca811d1a355725d7066386ed490ec","modified":1633589357158},{"_id":"themes/clean-blog/source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1633589357199},{"_id":"public/atom.xml","hash":"3ba6fec0fabfccd34ed74f308aa9f3cd8a718c97","modified":1633589764228},{"_id":"public/sitemap.xml","hash":"f716d3c827624a6cb6a9a4ccca8affd7e0fb7766","modified":1633589764228},{"_id":"public/content.json","hash":"212ec12e06909c1ca5ef8d8b6b9e86f24e07a006","modified":1633589764228},{"_id":"public/about/index.html","hash":"1dc3dc61fb50937e35326050d552839d5a207db3","modified":1633589764228},{"_id":"public/tags/index.html","hash":"5267ba89a574959316b186ec056cabe43aaacb1c","modified":1633589764228},{"_id":"public/categories/index.html","hash":"05a2c0d95dd87732401221ccc2d553e4671730ca","modified":1633589764228},{"_id":"public/2021/10/07/How-to-draft-a-new-release-on-PyPi-with-Github-Action/index.html","hash":"f0d308c09b90db31cbffab5cdd0d908b547c3e26","modified":1633589764228},{"_id":"public/2020/09/24/pipenv/index.html","hash":"da2c035d6a6e57eb8570099178528e2990ddf0e6","modified":1633589764228},{"_id":"public/archives/index.html","hash":"74af0ac156ccf4399f1157ca6ec980475b253a14","modified":1633589764228},{"_id":"public/archives/2020/index.html","hash":"7a39d6afc16f9ef22c76ca712a1b7895a2a6a1fe","modified":1633589764228},{"_id":"public/archives/2020/09/index.html","hash":"efaf9fd5ffce04513376742f3d865baa84d0fc30","modified":1633589764228},{"_id":"public/archives/2021/index.html","hash":"02b8915019333480f0ad0d5b1942ac519b26e2ca","modified":1633589764228},{"_id":"public/archives/2021/05/index.html","hash":"29c6a1e19174982349d94d3482ee20107fbe5495","modified":1633589764228},{"_id":"public/archives/2021/09/index.html","hash":"15409201e5cddb3eef0daf6f3428d24616978d9c","modified":1633589764228},{"_id":"public/archives/2021/10/index.html","hash":"1fae226b0904fd66b622f0f901a4ab38e04e7fe6","modified":1633589764228},{"_id":"public/index.html","hash":"7682161bd035ec1e6f9e274cee635cf6f7d8f44e","modified":1633589764228},{"_id":"public/tags/Debian/index.html","hash":"8ac4992a7d75ce3d8bc369a306da5961a8053bd8","modified":1633589764228},{"_id":"public/tags/Linux/index.html","hash":"65b992d8477a0114b3b4fb40dc23b8cb656e2992","modified":1633589764228},{"_id":"public/tags/Kali-Linux/index.html","hash":"5fb74c83459870fe4cacf5820f519f8387c491a4","modified":1633589764228},{"_id":"public/tags/Android-Malware/index.html","hash":"93b6673985f59894b121b0d8cda40dd73cc264fd","modified":1633589764228},{"_id":"public/tags/python/index.html","hash":"e869334d3eb9305e7665cb735048b601e1ccabc1","modified":1633589764228},{"_id":"public/tags/git/index.html","hash":"42aca006b7b5d5dc056d2b279bb9b3b86ef4ed85","modified":1633589764228},{"_id":"public/tags/python-github-release/index.html","hash":"dd866c64333876e1ac90f2a180796f4fd07ea5d5","modified":1633589764228},{"_id":"public/2021/09/30/Roaming-Mantis-with-Quark-Engine/index.html","hash":"49bd76fc259a572b671ff7c652f75aed97e6f3d7","modified":1633589764228},{"_id":"public/2021/09/30/CPython-zipfile-Code-Tracing/index.html","hash":"9b2b766a9f9545d09bdb2553bb444310a4627c15","modified":1633589764228},{"_id":"public/2021/05/03/Debian-Packaging/index.html","hash":"03992bf91fb9a781dd0a615a24493d3cd2d31c2f","modified":1633589764228},{"_id":"public/img/about-bg.jpg","hash":"d39126a6456f2bac0169d1779304725f179c9900","modified":1633589764228},{"_id":"public/css/base.css","hash":"91b6c032be9e146dfd68880fe79f77f5d2771b0f","modified":1633589764228},{"_id":"public/css/style.css","hash":"029be79fde48199c77c76dbaac80cec3715f0bc8","modified":1633589764228},{"_id":"public/css/mixins.css","hash":"45146e7f4346351cd7f364de344aecf9574475f9","modified":1633589764228},{"_id":"public/css/variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1633589764228},{"_id":"public/css/article.css","hash":"f0ee490e1207191946fffc9444f891e9b7ae7289","modified":1633589764228},{"_id":"public/img/home-bg.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1633589764228},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1633589764228}],"Category":[],"Data":[],"Page":[{"title":"About","description":"Hi there 👋","layout":"about","comments":0,"sidebar":"custom","_content":"\n### Hi there 👋\n\n#### Who am I\n\nJunWei is a security researcher and open-source enthusiast from Taiwan. A paranoid Pythonista and CPython contributor who now focuses on Android reverse engineering and malware analysis. And as a member of the PyCon Taiwan Program Committee, previously presented at Black Hat, DEFCON, HITB, ROOTCON, GrayHat, PyCon Europe/TW/KR/MY/IN. He’s the co-founder of Quark-Engine and the Quark package maintainer on Kali Linux, leading Quark to participate in the GSoC under the Honeynet Project since 2021.\n\nGoogle summer of code 2021 [Mentor](https://www.honeynet.org/gsoc/gsoc-2021/google-summer-of-code-2021-project-ideas#quark)\n\n[My Previous Talks](https://github.com/krnick/talks)\n\nThe projects I am currently working on:\n\n[![ReadMe Card](https://github-readme-stats.vercel.app/api/pin/?username=quark-engine&repo=quark-engine)](https://github.com/quark-engine/quark-engine)\n\n![JunWei Song's github stats](https://github-readme-stats.vercel.app/api?username=krnick&theme=blue-green&show_icons=true)\n\n![visitors](https://visitor-badge.laobi.icu/badge?page_id=krnick.krnick)\n\n[Resume (English Version)](https://www.cakeresume.com/sungboss2004)\n","source":"about/index.md","raw":"---\ntitle: About\ndescription: Hi there 👋\nlayout: about\ncomments: false\nsidebar: custom\n---\n\n### Hi there 👋\n\n#### Who am I\n\nJunWei is a security researcher and open-source enthusiast from Taiwan. A paranoid Pythonista and CPython contributor who now focuses on Android reverse engineering and malware analysis. And as a member of the PyCon Taiwan Program Committee, previously presented at Black Hat, DEFCON, HITB, ROOTCON, GrayHat, PyCon Europe/TW/KR/MY/IN. He’s the co-founder of Quark-Engine and the Quark package maintainer on Kali Linux, leading Quark to participate in the GSoC under the Honeynet Project since 2021.\n\nGoogle summer of code 2021 [Mentor](https://www.honeynet.org/gsoc/gsoc-2021/google-summer-of-code-2021-project-ideas#quark)\n\n[My Previous Talks](https://github.com/krnick/talks)\n\nThe projects I am currently working on:\n\n[![ReadMe Card](https://github-readme-stats.vercel.app/api/pin/?username=quark-engine&repo=quark-engine)](https://github.com/quark-engine/quark-engine)\n\n![JunWei Song's github stats](https://github-readme-stats.vercel.app/api?username=krnick&theme=blue-green&show_icons=true)\n\n![visitors](https://visitor-badge.laobi.icu/badge?page_id=krnick.krnick)\n\n[Resume (English Version)](https://www.cakeresume.com/sungboss2004)\n","date":"2021-10-07T06:49:17.182Z","updated":"2021-10-07T06:49:17.182Z","path":"about/index.html","_id":"ckugl61gj0000ivsaf2s04ed4","content":"<h3 id=\"Hi-there-👋\"><a href=\"#Hi-there-👋\" class=\"headerlink\" title=\"Hi there 👋\"></a>Hi there 👋</h3><h4 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"Who am I\"></a>Who am I</h4><p>JunWei is a security researcher and open-source enthusiast from Taiwan. A paranoid Pythonista and CPython contributor who now focuses on Android reverse engineering and malware analysis. And as a member of the PyCon Taiwan Program Committee, previously presented at Black Hat, DEFCON, HITB, ROOTCON, GrayHat, PyCon Europe/TW/KR/MY/IN. He’s the co-founder of Quark-Engine and the Quark package maintainer on Kali Linux, leading Quark to participate in the GSoC under the Honeynet Project since 2021.</p>\n<p>Google summer of code 2021 <a href=\"https://www.honeynet.org/gsoc/gsoc-2021/google-summer-of-code-2021-project-ideas#quark\">Mentor</a></p>\n<p><a href=\"https://github.com/krnick/talks\">My Previous Talks</a></p>\n<p>The projects I am currently working on:</p>\n<p><a href=\"https://github.com/quark-engine/quark-engine\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=quark-engine&repo=quark-engine\" alt=\"ReadMe Card\"></a></p>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=krnick&theme=blue-green&show_icons=true\" alt=\"JunWei Song&#39;s github stats\"></p>\n<p><img src=\"https://visitor-badge.laobi.icu/badge?page_id=krnick.krnick\" alt=\"visitors\"></p>\n<p><a href=\"https://www.cakeresume.com/sungboss2004\">Resume (English Version)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Hi-there-👋\"><a href=\"#Hi-there-👋\" class=\"headerlink\" title=\"Hi there 👋\"></a>Hi there 👋</h3><h4 id=\"Who-am-I\"><a href=\"#Who-am-I\" class=\"headerlink\" title=\"Who am I\"></a>Who am I</h4><p>JunWei is a security researcher and open-source enthusiast from Taiwan. A paranoid Pythonista and CPython contributor who now focuses on Android reverse engineering and malware analysis. And as a member of the PyCon Taiwan Program Committee, previously presented at Black Hat, DEFCON, HITB, ROOTCON, GrayHat, PyCon Europe/TW/KR/MY/IN. He’s the co-founder of Quark-Engine and the Quark package maintainer on Kali Linux, leading Quark to participate in the GSoC under the Honeynet Project since 2021.</p>\n<p>Google summer of code 2021 <a href=\"https://www.honeynet.org/gsoc/gsoc-2021/google-summer-of-code-2021-project-ideas#quark\">Mentor</a></p>\n<p><a href=\"https://github.com/krnick/talks\">My Previous Talks</a></p>\n<p>The projects I am currently working on:</p>\n<p><a href=\"https://github.com/quark-engine/quark-engine\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=quark-engine&repo=quark-engine\" alt=\"ReadMe Card\"></a></p>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=krnick&theme=blue-green&show_icons=true\" alt=\"JunWei Song&#39;s github stats\"></p>\n<p><img src=\"https://visitor-badge.laobi.icu/badge?page_id=krnick.krnick\" alt=\"visitors\"></p>\n<p><a href=\"https://www.cakeresume.com/sungboss2004\">Resume (English Version)</a></p>\n"},{"title":"Tags","date":"2020-09-23T05:06:01.000Z","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2020-09-23 13:06:01\nlayout: tags\ncomments: false\n---\n","updated":"2021-10-07T06:49:17.183Z","path":"tags/index.html","_id":"ckugl61gr0002ivsa2ow95xmm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Categories","layout":"categories","date":"2020-09-23T05:06:09.000Z","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\nlayout: categories\ndate: 2020-09-23 13:06:09\ncomments: false\n---\n","updated":"2021-10-07T06:49:17.182Z","path":"categories/index.html","_id":"ckugl61gv0005ivsa4oevb6fj","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Debian Packaging","date":"2021-05-03T08:10:42.000Z","_content":"\n[Kali Linux issue 0007121](https://bugs.kali.org/view.php?id=7121)\n\n# Kali Linux Release\n\n## 1. Prepare your Kali Linux virtual machine to build the Debian package.\n\n- [Virtualbox](https://www.virtualbox.org/wiki/Downloads)\n- [Kail Linux image for virtualbox](https://www.kali.org/get-kali/#kali-virtual-machines)\n\n### Update your kali Linux package source\n\n```bash\necho \"deb http://http.kali.org/kali kali-rolling main non-free contrib\" | sudo tee /etc/apt/sources.list\n\nsudo apt-get update\n```\n\nAfter setting up your virtual machine, you have to install the required packages based on the official documentation on this [website](https://www.kali.org/docs/development/setting-up-packaging-system/).\n\n\n### Install the required dependencies\n\n```bash\nsudo apt install -y packaging-dev apt-file gitk mr\n\nsudo apt-get install -y devscripts debhelper dh-make git-buildpackage sbuild dh-python python3-all\n```\n\n### Set up sbuild and log in again after completion\n\n```\nsudo mkdir -p /srv/chroots/\n\ncd /srv/chroots/\n\nsudo sbuild-createchroot --keyring=/usr/share/keyrings/kali-archive-keyring.gpg --arch=amd64 --components=main,contrib,non-free --include=kali-archive-keyring kali-dev kali-dev-amd64-sbuild http://http.kali.org/kali\n\necho \"source-root-groups=root,sbuild\" | sudo tee -a /etc/schroot/chroot.d/kali-dev-amd64-sbuild*\n\nsudo sbuild-adduser $USER\n```\n\n## 2. Creating the Debian files\n\nThe Debian package needs that the following four files are required in the debian directory.\n\n* control\n* copyright\n* changelog\n* rules\n\n[Here](https://www.debian.org/doc/manuals/maint-guide/dreq.en.html) is the official documentation on how to write all four files.\n\n## 3. Importing the Quark project\n\nPlease replace the version number you would like to update.\n\n```bash\nmkdir -p ~/kali/packages/quark-engine ~/kali/upstream/\n\nwget https://github.com/quark-engine/quark-engine/archive/refs/tags/v21.4.3.tar.gz  -O ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz\n\ncd /home/kali/kali/packages/quark-engine\n\ngit init\n\ngbp import-orig ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz\n```\n\n\n## 4. Build Package\n\n```bash\ngbp buildpackage --git-builder=sbuild\n```\n\nThen you will have the Quark `.deb` file if everything goes well.\n\n## 5. Request package upgrade\n\n1. Register [Kali Linux Bug Tracker](https://bugs.kali.org/my_view_page.php)\n\n2. Report an issue\n\nReport an issue by clicking the \"Report Issue\"\n\n![](https://i.imgur.com/R7fGbSY.png)\n\n3. Fill out the form\n\nPlease choose the \"Tool upgrade request\" option in `category` and \"kali-dev\" option in `product version` and keep anything else default value.\n\n![](https://i.imgur.com/Wclavqq.png)\n\nThe next step is filling out the summary and the description.\n\n4. Attach the .deb file\n\nUpload the `.deb` file you just created earlier.\n\n![](https://i.imgur.com/5Mbu3hf.png)\n\n5. Submit the issue\n\nWhen everything is all set, you can click \"Submit issue\".\n\n\nhttps://www.kali.org/docs/development/public-packaging/\nhttps://www.kali.org/docs/development/intro-to-packaging-example/\nhttps://www.kali.org/docs/development/setting-up-packaging-system/\nhttps://www.kali.org/docs/development/advanced-packaging-example/","source":"_posts/Debian-Packaging.md","raw":"---\ntitle: Debian Packaging\ndate: 2021-05-03 16:10:42\ntags:\n- Debian\n- Linux\n- Kali Linux\n---\n\n[Kali Linux issue 0007121](https://bugs.kali.org/view.php?id=7121)\n\n# Kali Linux Release\n\n## 1. Prepare your Kali Linux virtual machine to build the Debian package.\n\n- [Virtualbox](https://www.virtualbox.org/wiki/Downloads)\n- [Kail Linux image for virtualbox](https://www.kali.org/get-kali/#kali-virtual-machines)\n\n### Update your kali Linux package source\n\n```bash\necho \"deb http://http.kali.org/kali kali-rolling main non-free contrib\" | sudo tee /etc/apt/sources.list\n\nsudo apt-get update\n```\n\nAfter setting up your virtual machine, you have to install the required packages based on the official documentation on this [website](https://www.kali.org/docs/development/setting-up-packaging-system/).\n\n\n### Install the required dependencies\n\n```bash\nsudo apt install -y packaging-dev apt-file gitk mr\n\nsudo apt-get install -y devscripts debhelper dh-make git-buildpackage sbuild dh-python python3-all\n```\n\n### Set up sbuild and log in again after completion\n\n```\nsudo mkdir -p /srv/chroots/\n\ncd /srv/chroots/\n\nsudo sbuild-createchroot --keyring=/usr/share/keyrings/kali-archive-keyring.gpg --arch=amd64 --components=main,contrib,non-free --include=kali-archive-keyring kali-dev kali-dev-amd64-sbuild http://http.kali.org/kali\n\necho \"source-root-groups=root,sbuild\" | sudo tee -a /etc/schroot/chroot.d/kali-dev-amd64-sbuild*\n\nsudo sbuild-adduser $USER\n```\n\n## 2. Creating the Debian files\n\nThe Debian package needs that the following four files are required in the debian directory.\n\n* control\n* copyright\n* changelog\n* rules\n\n[Here](https://www.debian.org/doc/manuals/maint-guide/dreq.en.html) is the official documentation on how to write all four files.\n\n## 3. Importing the Quark project\n\nPlease replace the version number you would like to update.\n\n```bash\nmkdir -p ~/kali/packages/quark-engine ~/kali/upstream/\n\nwget https://github.com/quark-engine/quark-engine/archive/refs/tags/v21.4.3.tar.gz  -O ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz\n\ncd /home/kali/kali/packages/quark-engine\n\ngit init\n\ngbp import-orig ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz\n```\n\n\n## 4. Build Package\n\n```bash\ngbp buildpackage --git-builder=sbuild\n```\n\nThen you will have the Quark `.deb` file if everything goes well.\n\n## 5. Request package upgrade\n\n1. Register [Kali Linux Bug Tracker](https://bugs.kali.org/my_view_page.php)\n\n2. Report an issue\n\nReport an issue by clicking the \"Report Issue\"\n\n![](https://i.imgur.com/R7fGbSY.png)\n\n3. Fill out the form\n\nPlease choose the \"Tool upgrade request\" option in `category` and \"kali-dev\" option in `product version` and keep anything else default value.\n\n![](https://i.imgur.com/Wclavqq.png)\n\nThe next step is filling out the summary and the description.\n\n4. Attach the .deb file\n\nUpload the `.deb` file you just created earlier.\n\n![](https://i.imgur.com/5Mbu3hf.png)\n\n5. Submit the issue\n\nWhen everything is all set, you can click \"Submit issue\".\n\n\nhttps://www.kali.org/docs/development/public-packaging/\nhttps://www.kali.org/docs/development/intro-to-packaging-example/\nhttps://www.kali.org/docs/development/setting-up-packaging-system/\nhttps://www.kali.org/docs/development/advanced-packaging-example/","slug":"Debian-Packaging","published":1,"updated":"2021-10-07T06:55:55.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckugl61gn0001ivsab7jfbt4g","content":"<p><a href=\"https://bugs.kali.org/view.php?id=7121\">Kali Linux issue 0007121</a></p>\n<h1 id=\"Kali-Linux-Release\"><a href=\"#Kali-Linux-Release\" class=\"headerlink\" title=\"Kali Linux Release\"></a>Kali Linux Release</h1><h2 id=\"1-Prepare-your-Kali-Linux-virtual-machine-to-build-the-Debian-package\"><a href=\"#1-Prepare-your-Kali-Linux-virtual-machine-to-build-the-Debian-package\" class=\"headerlink\" title=\"1. Prepare your Kali Linux virtual machine to build the Debian package.\"></a>1. Prepare your Kali Linux virtual machine to build the Debian package.</h2><ul>\n<li><a href=\"https://www.virtualbox.org/wiki/Downloads\">Virtualbox</a></li>\n<li><a href=\"https://www.kali.org/get-kali/#kali-virtual-machines\">Kail Linux image for virtualbox</a></li>\n</ul>\n<h3 id=\"Update-your-kali-Linux-package-source\"><a href=\"#Update-your-kali-Linux-package-source\" class=\"headerlink\" title=\"Update your kali Linux package source\"></a>Update your kali Linux package source</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://http.kali.org/kali kali-rolling main non-free contrib&quot;</span> | sudo tee /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<p>After setting up your virtual machine, you have to install the required packages based on the official documentation on this <a href=\"https://www.kali.org/docs/development/setting-up-packaging-system/\">website</a>.</p>\n<h3 id=\"Install-the-required-dependencies\"><a href=\"#Install-the-required-dependencies\" class=\"headerlink\" title=\"Install the required dependencies\"></a>Install the required dependencies</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install -y packaging-dev apt-file gitk mr</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install -y devscripts debhelper dh-make git-buildpackage sbuild dh-python python3-all</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Set-up-sbuild-and-log-in-again-after-completion\"><a href=\"#Set-up-sbuild-and-log-in-again-after-completion\" class=\"headerlink\" title=\"Set up sbuild and log in again after completion\"></a>Set up sbuild and log in again after completion</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p &#x2F;srv&#x2F;chroots&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &#x2F;srv&#x2F;chroots&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sbuild-createchroot --keyring&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;kali-archive-keyring.gpg --arch&#x3D;amd64 --components&#x3D;main,contrib,non-free --include&#x3D;kali-archive-keyring kali-dev kali-dev-amd64-sbuild http:&#x2F;&#x2F;http.kali.org&#x2F;kali</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;source-root-groups&#x3D;root,sbuild&quot; | sudo tee -a &#x2F;etc&#x2F;schroot&#x2F;chroot.d&#x2F;kali-dev-amd64-sbuild*</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sbuild-adduser $USER</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Creating-the-Debian-files\"><a href=\"#2-Creating-the-Debian-files\" class=\"headerlink\" title=\"2. Creating the Debian files\"></a>2. Creating the Debian files</h2><p>The Debian package needs that the following four files are required in the debian directory.</p>\n<ul>\n<li>control</li>\n<li>copyright</li>\n<li>changelog</li>\n<li>rules</li>\n</ul>\n<p><a href=\"https://www.debian.org/doc/manuals/maint-guide/dreq.en.html\">Here</a> is the official documentation on how to write all four files.</p>\n<h2 id=\"3-Importing-the-Quark-project\"><a href=\"#3-Importing-the-Quark-project\" class=\"headerlink\" title=\"3. Importing the Quark project\"></a>3. Importing the Quark project</h2><p>Please replace the version number you would like to update.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/kali/packages/quark-engine ~/kali/upstream/</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/quark-engine/quark-engine/archive/refs/tags/v21.4.3.tar.gz  -O ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/kali/kali/packages/quark-engine</span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\">gbp import-orig ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-Build-Package\"><a href=\"#4-Build-Package\" class=\"headerlink\" title=\"4. Build Package\"></a>4. Build Package</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gbp buildpackage --git-builder=sbuild</span><br></pre></td></tr></table></figure>\n\n<p>Then you will have the Quark <code>.deb</code> file if everything goes well.</p>\n<h2 id=\"5-Request-package-upgrade\"><a href=\"#5-Request-package-upgrade\" class=\"headerlink\" title=\"5. Request package upgrade\"></a>5. Request package upgrade</h2><ol>\n<li><p>Register <a href=\"https://bugs.kali.org/my_view_page.php\">Kali Linux Bug Tracker</a></p>\n</li>\n<li><p>Report an issue</p>\n</li>\n</ol>\n<p>Report an issue by clicking the “Report Issue”</p>\n<p><img src=\"https://i.imgur.com/R7fGbSY.png\"></p>\n<ol start=\"3\">\n<li>Fill out the form</li>\n</ol>\n<p>Please choose the “Tool upgrade request” option in <code>category</code> and “kali-dev” option in <code>product version</code> and keep anything else default value.</p>\n<p><img src=\"https://i.imgur.com/Wclavqq.png\"></p>\n<p>The next step is filling out the summary and the description.</p>\n<ol start=\"4\">\n<li>Attach the .deb file</li>\n</ol>\n<p>Upload the <code>.deb</code> file you just created earlier.</p>\n<p><img src=\"https://i.imgur.com/5Mbu3hf.png\"></p>\n<ol start=\"5\">\n<li>Submit the issue</li>\n</ol>\n<p>When everything is all set, you can click “Submit issue”.</p>\n<p><a href=\"https://www.kali.org/docs/development/public-packaging/\">https://www.kali.org/docs/development/public-packaging/</a><br><a href=\"https://www.kali.org/docs/development/intro-to-packaging-example/\">https://www.kali.org/docs/development/intro-to-packaging-example/</a><br><a href=\"https://www.kali.org/docs/development/setting-up-packaging-system/\">https://www.kali.org/docs/development/setting-up-packaging-system/</a><br><a href=\"https://www.kali.org/docs/development/advanced-packaging-example/\">https://www.kali.org/docs/development/advanced-packaging-example/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://bugs.kali.org/view.php?id=7121\">Kali Linux issue 0007121</a></p>\n<h1 id=\"Kali-Linux-Release\"><a href=\"#Kali-Linux-Release\" class=\"headerlink\" title=\"Kali Linux Release\"></a>Kali Linux Release</h1><h2 id=\"1-Prepare-your-Kali-Linux-virtual-machine-to-build-the-Debian-package\"><a href=\"#1-Prepare-your-Kali-Linux-virtual-machine-to-build-the-Debian-package\" class=\"headerlink\" title=\"1. Prepare your Kali Linux virtual machine to build the Debian package.\"></a>1. Prepare your Kali Linux virtual machine to build the Debian package.</h2><ul>\n<li><a href=\"https://www.virtualbox.org/wiki/Downloads\">Virtualbox</a></li>\n<li><a href=\"https://www.kali.org/get-kali/#kali-virtual-machines\">Kail Linux image for virtualbox</a></li>\n</ul>\n<h3 id=\"Update-your-kali-Linux-package-source\"><a href=\"#Update-your-kali-Linux-package-source\" class=\"headerlink\" title=\"Update your kali Linux package source\"></a>Update your kali Linux package source</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;deb http://http.kali.org/kali kali-rolling main non-free contrib&quot;</span> | sudo tee /etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<p>After setting up your virtual machine, you have to install the required packages based on the official documentation on this <a href=\"https://www.kali.org/docs/development/setting-up-packaging-system/\">website</a>.</p>\n<h3 id=\"Install-the-required-dependencies\"><a href=\"#Install-the-required-dependencies\" class=\"headerlink\" title=\"Install the required dependencies\"></a>Install the required dependencies</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install -y packaging-dev apt-file gitk mr</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install -y devscripts debhelper dh-make git-buildpackage sbuild dh-python python3-all</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Set-up-sbuild-and-log-in-again-after-completion\"><a href=\"#Set-up-sbuild-and-log-in-again-after-completion\" class=\"headerlink\" title=\"Set up sbuild and log in again after completion\"></a>Set up sbuild and log in again after completion</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p &#x2F;srv&#x2F;chroots&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &#x2F;srv&#x2F;chroots&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sbuild-createchroot --keyring&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;kali-archive-keyring.gpg --arch&#x3D;amd64 --components&#x3D;main,contrib,non-free --include&#x3D;kali-archive-keyring kali-dev kali-dev-amd64-sbuild http:&#x2F;&#x2F;http.kali.org&#x2F;kali</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;source-root-groups&#x3D;root,sbuild&quot; | sudo tee -a &#x2F;etc&#x2F;schroot&#x2F;chroot.d&#x2F;kali-dev-amd64-sbuild*</span><br><span class=\"line\"></span><br><span class=\"line\">sudo sbuild-adduser $USER</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Creating-the-Debian-files\"><a href=\"#2-Creating-the-Debian-files\" class=\"headerlink\" title=\"2. Creating the Debian files\"></a>2. Creating the Debian files</h2><p>The Debian package needs that the following four files are required in the debian directory.</p>\n<ul>\n<li>control</li>\n<li>copyright</li>\n<li>changelog</li>\n<li>rules</li>\n</ul>\n<p><a href=\"https://www.debian.org/doc/manuals/maint-guide/dreq.en.html\">Here</a> is the official documentation on how to write all four files.</p>\n<h2 id=\"3-Importing-the-Quark-project\"><a href=\"#3-Importing-the-Quark-project\" class=\"headerlink\" title=\"3. Importing the Quark project\"></a>3. Importing the Quark project</h2><p>Please replace the version number you would like to update.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/kali/packages/quark-engine ~/kali/upstream/</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://github.com/quark-engine/quark-engine/archive/refs/tags/v21.4.3.tar.gz  -O ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /home/kali/kali/packages/quark-engine</span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\">gbp import-orig ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"4-Build-Package\"><a href=\"#4-Build-Package\" class=\"headerlink\" title=\"4. Build Package\"></a>4. Build Package</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gbp buildpackage --git-builder=sbuild</span><br></pre></td></tr></table></figure>\n\n<p>Then you will have the Quark <code>.deb</code> file if everything goes well.</p>\n<h2 id=\"5-Request-package-upgrade\"><a href=\"#5-Request-package-upgrade\" class=\"headerlink\" title=\"5. Request package upgrade\"></a>5. Request package upgrade</h2><ol>\n<li><p>Register <a href=\"https://bugs.kali.org/my_view_page.php\">Kali Linux Bug Tracker</a></p>\n</li>\n<li><p>Report an issue</p>\n</li>\n</ol>\n<p>Report an issue by clicking the “Report Issue”</p>\n<p><img src=\"https://i.imgur.com/R7fGbSY.png\"></p>\n<ol start=\"3\">\n<li>Fill out the form</li>\n</ol>\n<p>Please choose the “Tool upgrade request” option in <code>category</code> and “kali-dev” option in <code>product version</code> and keep anything else default value.</p>\n<p><img src=\"https://i.imgur.com/Wclavqq.png\"></p>\n<p>The next step is filling out the summary and the description.</p>\n<ol start=\"4\">\n<li>Attach the .deb file</li>\n</ol>\n<p>Upload the <code>.deb</code> file you just created earlier.</p>\n<p><img src=\"https://i.imgur.com/5Mbu3hf.png\"></p>\n<ol start=\"5\">\n<li>Submit the issue</li>\n</ol>\n<p>When everything is all set, you can click “Submit issue”.</p>\n<p><a href=\"https://www.kali.org/docs/development/public-packaging/\">https://www.kali.org/docs/development/public-packaging/</a><br><a href=\"https://www.kali.org/docs/development/intro-to-packaging-example/\">https://www.kali.org/docs/development/intro-to-packaging-example/</a><br><a href=\"https://www.kali.org/docs/development/setting-up-packaging-system/\">https://www.kali.org/docs/development/setting-up-packaging-system/</a><br><a href=\"https://www.kali.org/docs/development/advanced-packaging-example/\">https://www.kali.org/docs/development/advanced-packaging-example/</a></p>\n"},{"title":"CPython zipfile module code tracing for zip bomb vulnerability","date":"2021-09-30T08:39:10.000Z","_content":"\n# Background\n\nI reported a zip bomb vulnerability to the CPython community in 2019. Here are all the interesting resources and ideas.\n\n[Issue Discussion on BPO](https://bugs.python.org/issue36462)\n\n[CVE-2019-9674](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9674)\n\n[Decompression pitfall I wrote for official documentation](https://docs.python.org/3/library/zipfile.html#decompression-pitfalls)\n\n[Pull Request related it](https://github.com/python/cpython/pull/13378)\n\n[PyCon Korea 2019 - Click Click Boom! Bombs Over Our Minds](https://www.youtube.com/watch?v=-S4JVQt6GX4&ab_channel=PyConKorea)\n\n# zipfile analysis\n\nAccording to Black Hat's  [Cara Marie](https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf) research, there are some solutions against Zip Bomb. By limiting the size of the block to be read at a time, if there is still data remaining after the block that needs to be decompressed after reading this block, it is considered that it is possible to be a Zip Bomb.\n\nBelow is [Cara Marie](https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf) code\n\n```python\nimport zlib\ndef decompress(data, maxsize=1024000):\n    dec = zlib.decompressobj()\n    data = dec.decompress(data, maxsize)\n    if dec.unconsumed_tail:\n        raise ValueError(\"Possible bomb\")\n    del dec\n    return data\n```\n\nAs you can see, the strategy to defeating the zip bomb is by limiting a block, in this case, is max size 102400. However, we take a look at the Python standard library, [zipfile](https://github.com/python/cpython/blob/3.9/Lib/zipfile.py).\n\n\n---\n\nAccording to Cara Marie's approach, we try to figure out the difference between zipfile and zlib and **why we can't use zipfile directly for preventing zip bombs**, so we started to study zipfile source code.\n\n\n# [zipfile](https://github.com/python/cpython/blob/master/Lib/zipfile.py)\n\nSince I focus on the zip format and pick the most commonly used algorithm, DEFLATED algorithm. Inside the zipfile, we can see the location of unzipped function, starting at line `702`, getting the zlib object, and finally returning the object.\n\n**[zlib.decompressobj(-15)](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L702-L716)**\n\n\n```python\ndef _get_decompressor(compress_type):\n    if compress_type == ZIP_STORED:\n        return None\n    elif compress_type == ZIP_DEFLATED:\n        return zlib.decompressobj(-15)\n    elif compress_type == ZIP_BZIP2:\n        return bz2.BZ2Decompressor()\n    elif compress_type == ZIP_LZMA:\n        return LZMADecompressor()\n    else:\n        descr = compressor_names.get(compress_type)\n        if descr:\n            raise NotImplementedError(\"compression type %d (%s)\" % (compress_type, descr))\n        else:\n            raise NotImplementedError(\"compression type %d\" % (compress_type,))\n```\n\nFrom the above code, we can know that the zipfile is based on what zlib does. So we have to deep dive into what zlib did?\n\n# [zlib](https://docs.python.org/3/library/zlib.html)\n\nAccording to the zlib documentation\n\n> There are two ways to compression and decompression, .compress() and .decompress() will fit all files into memory at once. In contrast to the method of the object. It using .compressobj() and .decompressobj() which won’t fit into memory at once.\n\nThere are two ways to compress/decompress.\n\n1. .compress() and .decompress() will put the entire file into memory at a time\n2. .compressobj() and .decompressobj() separate the file , compress/decompress one block at a time\n\n---\n\nHowever, the official documentation does not clearly explain how to use the API to decompress files. The purpose of this method is to obtain the file data stream and decompress it through the Low-Level method. And we went back to the zipfile module and found that they had already done the decompression of zlib, so we planned to apply the patch for zipfile first.\n\nIn the way that zipfile belongs to `decompressobj`, we have the first way to accumulate chunks. As long as we can find out where to do the decompression of chunks, we accumulate it and give a threshold. If it exceeds, then consider that it is possible to be the zip bomb.\n\n\n# Get back at the zipfile\n\n1. Starting with the object\n\n[Line 706](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L706)\n```python\nreturn zlib.decompressobj(-15)\n```\n\n[Line 791](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L791)\n\nIt is the place where the class of zlib.decompressobj(-15) object is obtained and initialized.\n\n\nwhich belongs to ZipExtFile class\n```python\n    def __init__(self, fileobj, mode, zipinfo, decrypter=None,close_fileobj=False):\n```\n\nLet's find out what `fileobj` is\n\n[Line 1545](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L1545)\n\n```python\nreturn ZipExtFile(zef_file, mode, zinfo, zd, True)\n```\n\nReturn the class, and use zef_file, then follow zef_file\n\n\n\n[Line 719](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L719)\n\n_SharedFile being initialized\n\n```python\n    def __init__(self, file, pos, close, lock, writing):\n```\n\nHere we know that when zlib is decompressed, you can't start decompressing directly to Streaming, and you need to skip the file encoding in front of the zip file.\n\n[Line 759](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L759)\n\nIn class _Tellable: to initialize the position of the indicator that gets the file descriptor\n```python\n    def __init__(self, fp):\n        self.fp = fp\n        self.offset = 0\n```\n\nand then\n\n[Line 977](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L977-L984)\n\n\n```python\n\n        elif self._compress_type == ZIP_DEFLATED:\n            n = max(n, self.MIN_READ_SIZE)\n            data = self._decompressor.decompress(data, n)\n            self._eof = (self._decompressor.eof or\n                         self._compress_left <= 0 and\n                         not self._decompressor.unconsumed_tail)\n            if self._eof:\n                data += self._decompressor.flush()\n\n```\n\nWe observed that after choosing to use the ZIP_DEFLATED compression algorithm, we did a function max to get n.\n\n# Key Point\n```python\nmax(n, self.MIN_READ_SIZE)\n```\n\nWhen you use zlib.decompressobj as a block, how big is your block?\n, self.MIN_READ_SIZE is preset to 4096 bytes, which is the size of a page in the operating system.\n\n## Cara Marie's solution\n\n```python\nimport zlib\ndef decompress(data, maxsize=1024000):\n    dec = zlib.decompressobj()\n    data = dec.decompress(data, maxsize)\n    if dec.unconsumed_tail:\n        raise ValueError(\"Possible bomb\")\n    del dec\n    return data\n```\n\n## It sets maxsize to 102400 bytes\n\nAccording to the official document\n\n> Decompress.decompress(data, max_length=0)\n> Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in the string. This data should be concatenated to the output produced by any preceding calls to the decompress() method. Some of the input data may be preserved in internal buffers for later processing.\n>\n> If the optional parameter max_length is non-zero then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed, and unconsumed data will be stored in the attribute unconsumed_tail. This byte string must be passed to a subsequent call to decompress() if decompression is to continue. If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty.\n>\n> Changed in version 3.6: max_length can be used as a keyword argument.\n\n\nMax_length represents the file block size that can be read into the memory at a time and is marked with unconsumed_tail to see if any remaining files need to be decompressed.\n\nTherefore, his idea is more than 102400 bytes. If there is any remaining data, it means there may be a zip bomb.\n\n![](https://i.imgur.com/7schHy0.png)\n\n","source":"_posts/CPython-zipfile-Code-Tracing.md","raw":"---\ntitle: CPython zipfile module code tracing for zip bomb vulnerability\ndate: 2021-09-30 16:39:10\ntags:\n---\n\n# Background\n\nI reported a zip bomb vulnerability to the CPython community in 2019. Here are all the interesting resources and ideas.\n\n[Issue Discussion on BPO](https://bugs.python.org/issue36462)\n\n[CVE-2019-9674](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9674)\n\n[Decompression pitfall I wrote for official documentation](https://docs.python.org/3/library/zipfile.html#decompression-pitfalls)\n\n[Pull Request related it](https://github.com/python/cpython/pull/13378)\n\n[PyCon Korea 2019 - Click Click Boom! Bombs Over Our Minds](https://www.youtube.com/watch?v=-S4JVQt6GX4&ab_channel=PyConKorea)\n\n# zipfile analysis\n\nAccording to Black Hat's  [Cara Marie](https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf) research, there are some solutions against Zip Bomb. By limiting the size of the block to be read at a time, if there is still data remaining after the block that needs to be decompressed after reading this block, it is considered that it is possible to be a Zip Bomb.\n\nBelow is [Cara Marie](https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf) code\n\n```python\nimport zlib\ndef decompress(data, maxsize=1024000):\n    dec = zlib.decompressobj()\n    data = dec.decompress(data, maxsize)\n    if dec.unconsumed_tail:\n        raise ValueError(\"Possible bomb\")\n    del dec\n    return data\n```\n\nAs you can see, the strategy to defeating the zip bomb is by limiting a block, in this case, is max size 102400. However, we take a look at the Python standard library, [zipfile](https://github.com/python/cpython/blob/3.9/Lib/zipfile.py).\n\n\n---\n\nAccording to Cara Marie's approach, we try to figure out the difference between zipfile and zlib and **why we can't use zipfile directly for preventing zip bombs**, so we started to study zipfile source code.\n\n\n# [zipfile](https://github.com/python/cpython/blob/master/Lib/zipfile.py)\n\nSince I focus on the zip format and pick the most commonly used algorithm, DEFLATED algorithm. Inside the zipfile, we can see the location of unzipped function, starting at line `702`, getting the zlib object, and finally returning the object.\n\n**[zlib.decompressobj(-15)](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L702-L716)**\n\n\n```python\ndef _get_decompressor(compress_type):\n    if compress_type == ZIP_STORED:\n        return None\n    elif compress_type == ZIP_DEFLATED:\n        return zlib.decompressobj(-15)\n    elif compress_type == ZIP_BZIP2:\n        return bz2.BZ2Decompressor()\n    elif compress_type == ZIP_LZMA:\n        return LZMADecompressor()\n    else:\n        descr = compressor_names.get(compress_type)\n        if descr:\n            raise NotImplementedError(\"compression type %d (%s)\" % (compress_type, descr))\n        else:\n            raise NotImplementedError(\"compression type %d\" % (compress_type,))\n```\n\nFrom the above code, we can know that the zipfile is based on what zlib does. So we have to deep dive into what zlib did?\n\n# [zlib](https://docs.python.org/3/library/zlib.html)\n\nAccording to the zlib documentation\n\n> There are two ways to compression and decompression, .compress() and .decompress() will fit all files into memory at once. In contrast to the method of the object. It using .compressobj() and .decompressobj() which won’t fit into memory at once.\n\nThere are two ways to compress/decompress.\n\n1. .compress() and .decompress() will put the entire file into memory at a time\n2. .compressobj() and .decompressobj() separate the file , compress/decompress one block at a time\n\n---\n\nHowever, the official documentation does not clearly explain how to use the API to decompress files. The purpose of this method is to obtain the file data stream and decompress it through the Low-Level method. And we went back to the zipfile module and found that they had already done the decompression of zlib, so we planned to apply the patch for zipfile first.\n\nIn the way that zipfile belongs to `decompressobj`, we have the first way to accumulate chunks. As long as we can find out where to do the decompression of chunks, we accumulate it and give a threshold. If it exceeds, then consider that it is possible to be the zip bomb.\n\n\n# Get back at the zipfile\n\n1. Starting with the object\n\n[Line 706](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L706)\n```python\nreturn zlib.decompressobj(-15)\n```\n\n[Line 791](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L791)\n\nIt is the place where the class of zlib.decompressobj(-15) object is obtained and initialized.\n\n\nwhich belongs to ZipExtFile class\n```python\n    def __init__(self, fileobj, mode, zipinfo, decrypter=None,close_fileobj=False):\n```\n\nLet's find out what `fileobj` is\n\n[Line 1545](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L1545)\n\n```python\nreturn ZipExtFile(zef_file, mode, zinfo, zd, True)\n```\n\nReturn the class, and use zef_file, then follow zef_file\n\n\n\n[Line 719](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L719)\n\n_SharedFile being initialized\n\n```python\n    def __init__(self, file, pos, close, lock, writing):\n```\n\nHere we know that when zlib is decompressed, you can't start decompressing directly to Streaming, and you need to skip the file encoding in front of the zip file.\n\n[Line 759](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L759)\n\nIn class _Tellable: to initialize the position of the indicator that gets the file descriptor\n```python\n    def __init__(self, fp):\n        self.fp = fp\n        self.offset = 0\n```\n\nand then\n\n[Line 977](https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L977-L984)\n\n\n```python\n\n        elif self._compress_type == ZIP_DEFLATED:\n            n = max(n, self.MIN_READ_SIZE)\n            data = self._decompressor.decompress(data, n)\n            self._eof = (self._decompressor.eof or\n                         self._compress_left <= 0 and\n                         not self._decompressor.unconsumed_tail)\n            if self._eof:\n                data += self._decompressor.flush()\n\n```\n\nWe observed that after choosing to use the ZIP_DEFLATED compression algorithm, we did a function max to get n.\n\n# Key Point\n```python\nmax(n, self.MIN_READ_SIZE)\n```\n\nWhen you use zlib.decompressobj as a block, how big is your block?\n, self.MIN_READ_SIZE is preset to 4096 bytes, which is the size of a page in the operating system.\n\n## Cara Marie's solution\n\n```python\nimport zlib\ndef decompress(data, maxsize=1024000):\n    dec = zlib.decompressobj()\n    data = dec.decompress(data, maxsize)\n    if dec.unconsumed_tail:\n        raise ValueError(\"Possible bomb\")\n    del dec\n    return data\n```\n\n## It sets maxsize to 102400 bytes\n\nAccording to the official document\n\n> Decompress.decompress(data, max_length=0)\n> Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in the string. This data should be concatenated to the output produced by any preceding calls to the decompress() method. Some of the input data may be preserved in internal buffers for later processing.\n>\n> If the optional parameter max_length is non-zero then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed, and unconsumed data will be stored in the attribute unconsumed_tail. This byte string must be passed to a subsequent call to decompress() if decompression is to continue. If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty.\n>\n> Changed in version 3.6: max_length can be used as a keyword argument.\n\n\nMax_length represents the file block size that can be read into the memory at a time and is marked with unconsumed_tail to see if any remaining files need to be decompressed.\n\nTherefore, his idea is more than 102400 bytes. If there is any remaining data, it means there may be a zip bomb.\n\n![](https://i.imgur.com/7schHy0.png)\n\n","slug":"CPython-zipfile-Code-Tracing","published":1,"updated":"2021-10-07T06:49:17.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckugl61gs0003ivsa4huu27la","content":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><p>I reported a zip bomb vulnerability to the CPython community in 2019. Here are all the interesting resources and ideas.</p>\n<p><a href=\"https://bugs.python.org/issue36462\">Issue Discussion on BPO</a></p>\n<p><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9674\">CVE-2019-9674</a></p>\n<p><a href=\"https://docs.python.org/3/library/zipfile.html#decompression-pitfalls\">Decompression pitfall I wrote for official documentation</a></p>\n<p><a href=\"https://github.com/python/cpython/pull/13378\">Pull Request related it</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=-S4JVQt6GX4&ab_channel=PyConKorea\">PyCon Korea 2019 - Click Click Boom! Bombs Over Our Minds</a></p>\n<h1 id=\"zipfile-analysis\"><a href=\"#zipfile-analysis\" class=\"headerlink\" title=\"zipfile analysis\"></a>zipfile analysis</h1><p>According to Black Hat’s  <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf\">Cara Marie</a> research, there are some solutions against Zip Bomb. By limiting the size of the block to be read at a time, if there is still data remaining after the block that needs to be decompressed after reading this block, it is considered that it is possible to be a Zip Bomb.</p>\n<p>Below is <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf\">Cara Marie</a> code</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decompress</span>(<span class=\"params\">data, maxsize=<span class=\"number\">1024000</span></span>):</span></span><br><span class=\"line\">    dec = zlib.decompressobj()</span><br><span class=\"line\">    data = dec.decompress(data, maxsize)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dec.unconsumed_tail:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;Possible bomb&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> dec</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the strategy to defeating the zip bomb is by limiting a block, in this case, is max size 102400. However, we take a look at the Python standard library, <a href=\"https://github.com/python/cpython/blob/3.9/Lib/zipfile.py\">zipfile</a>.</p>\n<hr>\n<p>According to Cara Marie’s approach, we try to figure out the difference between zipfile and zlib and <strong>why we can’t use zipfile directly for preventing zip bombs</strong>, so we started to study zipfile source code.</p>\n<h1 id=\"zipfile\"><a href=\"#zipfile\" class=\"headerlink\" title=\"zipfile\"></a><a href=\"https://github.com/python/cpython/blob/master/Lib/zipfile.py\">zipfile</a></h1><p>Since I focus on the zip format and pick the most commonly used algorithm, DEFLATED algorithm. Inside the zipfile, we can see the location of unzipped function, starting at line <code>702</code>, getting the zlib object, and finally returning the object.</p>\n<p><strong><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L702-L716\">zlib.decompressobj(-15)</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_decompressor</span>(<span class=\"params\">compress_type</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> compress_type == ZIP_STORED:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_DEFLATED:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zlib.decompressobj(<span class=\"number\">-15</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_BZIP2:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bz2.BZ2Decompressor()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_LZMA:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LZMADecompressor()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        descr = compressor_names.get(compress_type)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> descr:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> NotImplementedError(<span class=\"string\">&quot;compression type %d (%s)&quot;</span> % (compress_type, descr))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> NotImplementedError(<span class=\"string\">&quot;compression type %d&quot;</span> % (compress_type,))</span><br></pre></td></tr></table></figure>\n\n<p>From the above code, we can know that the zipfile is based on what zlib does. So we have to deep dive into what zlib did?</p>\n<h1 id=\"zlib\"><a href=\"#zlib\" class=\"headerlink\" title=\"zlib\"></a><a href=\"https://docs.python.org/3/library/zlib.html\">zlib</a></h1><p>According to the zlib documentation</p>\n<blockquote>\n<p>There are two ways to compression and decompression, .compress() and .decompress() will fit all files into memory at once. In contrast to the method of the object. It using .compressobj() and .decompressobj() which won’t fit into memory at once.</p>\n</blockquote>\n<p>There are two ways to compress/decompress.</p>\n<ol>\n<li>.compress() and .decompress() will put the entire file into memory at a time</li>\n<li>.compressobj() and .decompressobj() separate the file , compress/decompress one block at a time</li>\n</ol>\n<hr>\n<p>However, the official documentation does not clearly explain how to use the API to decompress files. The purpose of this method is to obtain the file data stream and decompress it through the Low-Level method. And we went back to the zipfile module and found that they had already done the decompression of zlib, so we planned to apply the patch for zipfile first.</p>\n<p>In the way that zipfile belongs to <code>decompressobj</code>, we have the first way to accumulate chunks. As long as we can find out where to do the decompression of chunks, we accumulate it and give a threshold. If it exceeds, then consider that it is possible to be the zip bomb.</p>\n<h1 id=\"Get-back-at-the-zipfile\"><a href=\"#Get-back-at-the-zipfile\" class=\"headerlink\" title=\"Get back at the zipfile\"></a>Get back at the zipfile</h1><ol>\n<li>Starting with the object</li>\n</ol>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L706\">Line 706</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> zlib.decompressobj(<span class=\"number\">-15</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L791\">Line 791</a></p>\n<p>It is the place where the class of zlib.decompressobj(-15) object is obtained and initialized.</p>\n<p>which belongs to ZipExtFile class</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, fileobj, mode, zipinfo, decrypter=None,close_fileobj=False</span>):</span></span><br></pre></td></tr></table></figure>\n\n<p>Let’s find out what <code>fileobj</code> is</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L1545\">Line 1545</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> ZipExtFile(zef_file, mode, zinfo, zd, <span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Return the class, and use zef_file, then follow zef_file</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L719\">Line 719</a></p>\n<p>_SharedFile being initialized</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, file, pos, close, lock, writing</span>):</span></span><br></pre></td></tr></table></figure>\n\n<p>Here we know that when zlib is decompressed, you can’t start decompressing directly to Streaming, and you need to skip the file encoding in front of the zip file.</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L759\">Line 759</a></p>\n<p>In class _Tellable: to initialize the position of the indicator that gets the file descriptor</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, fp</span>):</span></span><br><span class=\"line\">    self.fp = fp</span><br><span class=\"line\">    self.offset = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>and then</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L977-L984\">Line 977</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">elif</span> self._compress_type == ZIP_DEFLATED:</span><br><span class=\"line\">    n = max(n, self.MIN_READ_SIZE)</span><br><span class=\"line\">    data = self._decompressor.decompress(data, n)</span><br><span class=\"line\">    self._eof = (self._decompressor.eof <span class=\"keyword\">or</span></span><br><span class=\"line\">                 self._compress_left &lt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">                 <span class=\"keyword\">not</span> self._decompressor.unconsumed_tail)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self._eof:</span><br><span class=\"line\">        data += self._decompressor.flush()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We observed that after choosing to use the ZIP_DEFLATED compression algorithm, we did a function max to get n.</p>\n<h1 id=\"Key-Point\"><a href=\"#Key-Point\" class=\"headerlink\" title=\"Key Point\"></a>Key Point</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(n, self.MIN_READ_SIZE)</span><br></pre></td></tr></table></figure>\n\n<p>When you use zlib.decompressobj as a block, how big is your block?<br>, self.MIN_READ_SIZE is preset to 4096 bytes, which is the size of a page in the operating system.</p>\n<h2 id=\"Cara-Marie’s-solution\"><a href=\"#Cara-Marie’s-solution\" class=\"headerlink\" title=\"Cara Marie’s solution\"></a>Cara Marie’s solution</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decompress</span>(<span class=\"params\">data, maxsize=<span class=\"number\">1024000</span></span>):</span></span><br><span class=\"line\">    dec = zlib.decompressobj()</span><br><span class=\"line\">    data = dec.decompress(data, maxsize)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dec.unconsumed_tail:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;Possible bomb&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> dec</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"It-sets-maxsize-to-102400-bytes\"><a href=\"#It-sets-maxsize-to-102400-bytes\" class=\"headerlink\" title=\"It sets maxsize to 102400 bytes\"></a>It sets maxsize to 102400 bytes</h2><p>According to the official document</p>\n<blockquote>\n<p>Decompress.decompress(data, max_length=0)<br>Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in the string. This data should be concatenated to the output produced by any preceding calls to the decompress() method. Some of the input data may be preserved in internal buffers for later processing.</p>\n<p>If the optional parameter max_length is non-zero then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed, and unconsumed data will be stored in the attribute unconsumed_tail. This byte string must be passed to a subsequent call to decompress() if decompression is to continue. If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty.</p>\n<p>Changed in version 3.6: max_length can be used as a keyword argument.</p>\n</blockquote>\n<p>Max_length represents the file block size that can be read into the memory at a time and is marked with unconsumed_tail to see if any remaining files need to be decompressed.</p>\n<p>Therefore, his idea is more than 102400 bytes. If there is any remaining data, it means there may be a zip bomb.</p>\n<p><img src=\"https://i.imgur.com/7schHy0.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h1><p>I reported a zip bomb vulnerability to the CPython community in 2019. Here are all the interesting resources and ideas.</p>\n<p><a href=\"https://bugs.python.org/issue36462\">Issue Discussion on BPO</a></p>\n<p><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9674\">CVE-2019-9674</a></p>\n<p><a href=\"https://docs.python.org/3/library/zipfile.html#decompression-pitfalls\">Decompression pitfall I wrote for official documentation</a></p>\n<p><a href=\"https://github.com/python/cpython/pull/13378\">Pull Request related it</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=-S4JVQt6GX4&ab_channel=PyConKorea\">PyCon Korea 2019 - Click Click Boom! Bombs Over Our Minds</a></p>\n<h1 id=\"zipfile-analysis\"><a href=\"#zipfile-analysis\" class=\"headerlink\" title=\"zipfile analysis\"></a>zipfile analysis</h1><p>According to Black Hat’s  <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf\">Cara Marie</a> research, there are some solutions against Zip Bomb. By limiting the size of the block to be read at a time, if there is still data remaining after the block that needs to be decompressed after reading this block, it is considered that it is possible to be a Zip Bomb.</p>\n<p>Below is <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Marie-I-Came-to-Drop-Bombs-Auditing-The-Compression-Algorithm-Weapons-Cache.pdf\">Cara Marie</a> code</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decompress</span>(<span class=\"params\">data, maxsize=<span class=\"number\">1024000</span></span>):</span></span><br><span class=\"line\">    dec = zlib.decompressobj()</span><br><span class=\"line\">    data = dec.decompress(data, maxsize)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dec.unconsumed_tail:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;Possible bomb&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> dec</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the strategy to defeating the zip bomb is by limiting a block, in this case, is max size 102400. However, we take a look at the Python standard library, <a href=\"https://github.com/python/cpython/blob/3.9/Lib/zipfile.py\">zipfile</a>.</p>\n<hr>\n<p>According to Cara Marie’s approach, we try to figure out the difference between zipfile and zlib and <strong>why we can’t use zipfile directly for preventing zip bombs</strong>, so we started to study zipfile source code.</p>\n<h1 id=\"zipfile\"><a href=\"#zipfile\" class=\"headerlink\" title=\"zipfile\"></a><a href=\"https://github.com/python/cpython/blob/master/Lib/zipfile.py\">zipfile</a></h1><p>Since I focus on the zip format and pick the most commonly used algorithm, DEFLATED algorithm. Inside the zipfile, we can see the location of unzipped function, starting at line <code>702</code>, getting the zlib object, and finally returning the object.</p>\n<p><strong><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L702-L716\">zlib.decompressobj(-15)</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get_decompressor</span>(<span class=\"params\">compress_type</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> compress_type == ZIP_STORED:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_DEFLATED:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zlib.decompressobj(<span class=\"number\">-15</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_BZIP2:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bz2.BZ2Decompressor()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> compress_type == ZIP_LZMA:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LZMADecompressor()</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        descr = compressor_names.get(compress_type)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> descr:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> NotImplementedError(<span class=\"string\">&quot;compression type %d (%s)&quot;</span> % (compress_type, descr))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> NotImplementedError(<span class=\"string\">&quot;compression type %d&quot;</span> % (compress_type,))</span><br></pre></td></tr></table></figure>\n\n<p>From the above code, we can know that the zipfile is based on what zlib does. So we have to deep dive into what zlib did?</p>\n<h1 id=\"zlib\"><a href=\"#zlib\" class=\"headerlink\" title=\"zlib\"></a><a href=\"https://docs.python.org/3/library/zlib.html\">zlib</a></h1><p>According to the zlib documentation</p>\n<blockquote>\n<p>There are two ways to compression and decompression, .compress() and .decompress() will fit all files into memory at once. In contrast to the method of the object. It using .compressobj() and .decompressobj() which won’t fit into memory at once.</p>\n</blockquote>\n<p>There are two ways to compress/decompress.</p>\n<ol>\n<li>.compress() and .decompress() will put the entire file into memory at a time</li>\n<li>.compressobj() and .decompressobj() separate the file , compress/decompress one block at a time</li>\n</ol>\n<hr>\n<p>However, the official documentation does not clearly explain how to use the API to decompress files. The purpose of this method is to obtain the file data stream and decompress it through the Low-Level method. And we went back to the zipfile module and found that they had already done the decompression of zlib, so we planned to apply the patch for zipfile first.</p>\n<p>In the way that zipfile belongs to <code>decompressobj</code>, we have the first way to accumulate chunks. As long as we can find out where to do the decompression of chunks, we accumulate it and give a threshold. If it exceeds, then consider that it is possible to be the zip bomb.</p>\n<h1 id=\"Get-back-at-the-zipfile\"><a href=\"#Get-back-at-the-zipfile\" class=\"headerlink\" title=\"Get back at the zipfile\"></a>Get back at the zipfile</h1><ol>\n<li>Starting with the object</li>\n</ol>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L706\">Line 706</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> zlib.decompressobj(<span class=\"number\">-15</span>)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L791\">Line 791</a></p>\n<p>It is the place where the class of zlib.decompressobj(-15) object is obtained and initialized.</p>\n<p>which belongs to ZipExtFile class</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, fileobj, mode, zipinfo, decrypter=None,close_fileobj=False</span>):</span></span><br></pre></td></tr></table></figure>\n\n<p>Let’s find out what <code>fileobj</code> is</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L1545\">Line 1545</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> ZipExtFile(zef_file, mode, zinfo, zd, <span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Return the class, and use zef_file, then follow zef_file</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L719\">Line 719</a></p>\n<p>_SharedFile being initialized</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, file, pos, close, lock, writing</span>):</span></span><br></pre></td></tr></table></figure>\n\n<p>Here we know that when zlib is decompressed, you can’t start decompressing directly to Streaming, and you need to skip the file encoding in front of the zip file.</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L759\">Line 759</a></p>\n<p>In class _Tellable: to initialize the position of the indicator that gets the file descriptor</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, fp</span>):</span></span><br><span class=\"line\">    self.fp = fp</span><br><span class=\"line\">    self.offset = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>and then</p>\n<p><a href=\"https://github.com/python/cpython/blob/f2320b37d9c85d8ddfc0c6afa81b77cd5f6e5ef2/Lib/zipfile.py#L977-L984\">Line 977</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">elif</span> self._compress_type == ZIP_DEFLATED:</span><br><span class=\"line\">    n = max(n, self.MIN_READ_SIZE)</span><br><span class=\"line\">    data = self._decompressor.decompress(data, n)</span><br><span class=\"line\">    self._eof = (self._decompressor.eof <span class=\"keyword\">or</span></span><br><span class=\"line\">                 self._compress_left &lt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span></span><br><span class=\"line\">                 <span class=\"keyword\">not</span> self._decompressor.unconsumed_tail)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> self._eof:</span><br><span class=\"line\">        data += self._decompressor.flush()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We observed that after choosing to use the ZIP_DEFLATED compression algorithm, we did a function max to get n.</p>\n<h1 id=\"Key-Point\"><a href=\"#Key-Point\" class=\"headerlink\" title=\"Key Point\"></a>Key Point</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(n, self.MIN_READ_SIZE)</span><br></pre></td></tr></table></figure>\n\n<p>When you use zlib.decompressobj as a block, how big is your block?<br>, self.MIN_READ_SIZE is preset to 4096 bytes, which is the size of a page in the operating system.</p>\n<h2 id=\"Cara-Marie’s-solution\"><a href=\"#Cara-Marie’s-solution\" class=\"headerlink\" title=\"Cara Marie’s solution\"></a>Cara Marie’s solution</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decompress</span>(<span class=\"params\">data, maxsize=<span class=\"number\">1024000</span></span>):</span></span><br><span class=\"line\">    dec = zlib.decompressobj()</span><br><span class=\"line\">    data = dec.decompress(data, maxsize)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dec.unconsumed_tail:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&quot;Possible bomb&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">del</span> dec</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"It-sets-maxsize-to-102400-bytes\"><a href=\"#It-sets-maxsize-to-102400-bytes\" class=\"headerlink\" title=\"It sets maxsize to 102400 bytes\"></a>It sets maxsize to 102400 bytes</h2><p>According to the official document</p>\n<blockquote>\n<p>Decompress.decompress(data, max_length=0)<br>Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in the string. This data should be concatenated to the output produced by any preceding calls to the decompress() method. Some of the input data may be preserved in internal buffers for later processing.</p>\n<p>If the optional parameter max_length is non-zero then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed, and unconsumed data will be stored in the attribute unconsumed_tail. This byte string must be passed to a subsequent call to decompress() if decompression is to continue. If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty.</p>\n<p>Changed in version 3.6: max_length can be used as a keyword argument.</p>\n</blockquote>\n<p>Max_length represents the file block size that can be read into the memory at a time and is marked with unconsumed_tail to see if any remaining files need to be decompressed.</p>\n<p>Therefore, his idea is more than 102400 bytes. If there is any remaining data, it means there may be a zip bomb.</p>\n<p><img src=\"https://i.imgur.com/7schHy0.png\"></p>\n"},{"title":"Roaming Mantis with Quark-Engine","date":"2021-09-30T10:02:23.000Z","_content":"\n# Analyze Roaming Mantis with Quark-Engine\n\n![](https://i.imgur.com/HSJF3nj.png)\n\n# Introduction\n\nRoaming Mantis is a notorious malware that was first discovered in 2018 and aims at the Asian region. In the past two years, it has evolved and spread around the world. This malware intends to steal personal sensitive data (e.g. account information, SMS messages, and voice calls). Also, the malware bypassed the two-factor authentication by monitoring SMS messages.\n\nAccording to the report from Kaspersky Lab, the main distribution of this malware is using DNS hijacking through a compromised router. As long as the user connects to the router, their DNS lookup will be redirected to the malicious URL. After the user connects to the malicious website, they will be prompted to download the Google update application, which turns out to be the Android malware.\n\nIn this report, we focus on the APK downloaded by victims who were redirected to the malicious URL. We aim at showing how malware analysts can use Quark Engine to quickly understand what this malware does to the victim.\n\nThis malware contains a DEX file encoded by the base64 algorithm. Therefore, we will first demonstrate how we can use sets of detection rules to quickly find where to decode the base64 algorithm and where to load the DEX file in the malware.\n\nAfter decrypting the DEX file. We then further investigate malicious activities in the DEX file with sets of our detection rules. Also, we prove that obfuscation techniques are useless due to the magic design of Quark Engine.\n\nAll in all, we show that by using Quark and detection rule sets, malware analysis can be so much fun.\n\n\n# Investigating the Android APK\n\n## Summary Report for the APK\n\n![](https://i.imgur.com/Ycu9DTH.png)\n\nIn this report, our engine found 10 potential malicious activities with detection rules accordingly. As for the confidence, scores, and weight, please take a look at our talk at DEFCON Blue Team Village videos on YouTube. We explain everything there.\n\n{%youtube XK-yqHPnsvc %}\n\nThe scoring system will only take effect if we have enough detection rules. Before we accumulate enough rules, we set the scores and weights all the same. Therefore, the risk levels and total scores are for reference only.\n\nAfter generating the summary report, we then use an automatic technique to classify these 10 potential malicious activities.\n\n\n## Exploring Malicious Activities\n### Rule Classification: onCreate\n![](https://i.imgur.com/8Q1Ajf7.png)\n\nThe picture above shows that 5 suspicious activities were found under the function onCreate.\n\nThis picture can help malware analysts to understand the malware in an easy way.\n\nAs shown above, we found five behaviors in function onCreate. Despite that rules are not listed in the right order, we can still piece them together and tell a story.\n\nWith the descriptions in the table, we can simply and quickly guess that this function decodes and load the suspicious payload.\n\nAfter validating through reading the smali-like source codes, our guess is right!\n\nAnd the right order of the behaviors is:\n1. Get the absolute path of the file and store it in a string.\n2.  Open a file from the given absolute path of the file.\n3. Read a file from the assets directory.\n4. Write file after Base64 decoding.\n5. Load additional DEX files dynamically.\n\n### Rule Classification: a\n![](https://i.imgur.com/cB0ke4D.png)\n\nAs shown above, it is obvious that function a is about to do method reflection, MAGIC!\n\n### Rule Classification: run\n![](https://i.imgur.com/oJVy5b3.png)\n\nAnther method reflection detected!! MAGIC!\n\n# Decrypting the DEX file\n\nAs mentioned above, we know that the Roaming Mantis reads a file from the assets directory and uses Base64 to decode it. For further investigation, we find the file of the DEX payload.\n\n![](https://i.imgur.com/8isbtIy.png)\n\nAfter unzipping the \"assets/db\" file, we then use the Base64 to decode it and rename it Roaming_Mantis.dex.\n\n![](https://i.imgur.com/jsyEBYd.png)\n\nNow we have the DEX payload!.\n\n---\n\n## Summary Report of the DEX file\n\nNow, let's do the summary report again for the DEX payload, we found 37 suspicious activities.\n\n![](https://i.imgur.com/CrY5STX.png)\n\nWe simply summarize these suspicious behaviors into twelve categories.\n\n1. Connect to the remote server\n2. Start a web server\n3. Monitor/Delete/Send SMS/MMS\n4. Access network information\n5. Access phone information\n6. Access personal information\n7. Record audio/video\n8. Load external class\n9. Access currently running applications and installed packages\n10. Make a phone call\n11. Open a web page\n12. Install other APKs from the file\n\nNext, we will introduce some interesting and highly suspicious activities to you based on the above categories.\n\n## 1. Connect to the remote server\n### Rule Classification: a/b;a\n![](https://i.imgur.com/H2w1mJw.png)\n\nC2 connections are common in malware. This is a clue for further C2 investigation.\n\n## 2. Start a web server\n### Rule Classification: b/g;run\n![](https://i.imgur.com/4Wk6bYC.png)\n\nOur investigation proves that the malware starts a web server and tricks users into filling credentials like username, password, etc.\n\n## 3. Monitor/Delete/Send SMS/MMS\n### Rule Classification: com/n;b\n![](https://i.imgur.com/ZDz9lKw.png)\n### Rule Classification: com/Loader$s;onReceive\n![](https://i.imgur.com/HdtYquG.png)\n### Rule Classification: com/Loader;start\n![](https://i.imgur.com/bbiqb9e.png)\n\nOur investigation proves that these operations concerning SMS might launch activities like:\n\n1. Steal verification code for the two-factor authentication.\n2. Steal verification code during online purchasing.\n\n\n## 4. Access phone information\n### Rule Classification: a/a;a\n![](https://i.imgur.com/4q30DC6.png)\n### Rule Classification: com/Loader$ag$1;a\n![](https://i.imgur.com/qE24Cjr.png)\n\nOur investigation proves that these operations concerning \"access phone information\" might launch activities like:\n\n1. Query the IMEI number to targeting the Asian region.\n2. Check the SIM card status just make sure the victim's phone works.\n\n\n## 5. Record audio/video\n### Rule Classification: com/j;a\n![](https://i.imgur.com/7RCWH27.png)\n\nThrilling! This malware records your audio/video!\n\n\n# Conclusion\n\nThis report shows how malware analysts can use the quark engine to quickly guess behaviors of malware and to quickly validate their guess through call graphs and the classification table.\n\nIn this report, we show that Quark Engine bypassed the obfuscation techniques used in Roaming Mantis. Also, this time we provide some useful rule sets for the detection. E.g. detecting payload decryption, dex loader, method reflection, SMS operation, potential c2 connection etc. And all these rules are generated by using our auto-generate tools.\n\nWe're proud of our work and we love to play around with it.\n\nSo, if you want to take a sip of the quark engine. Please visit our GitHub  repository:\n* https://bit.ly/2ISYG2s\n\nAnd the rules used in this report.\n* https://bit.ly/3jAOkAv\n\nYou can generate rules by yourself if you can't wait for our next rule release!\n* https://bit.ly/2IJNxkE\n","source":"_posts/Roaming-Mantis-with-Quark-Engine.md","raw":"---\ntitle: Roaming Mantis with Quark-Engine\ndate: 2021-09-30 18:02:23\ntags: Android, Malware\n---\n\n# Analyze Roaming Mantis with Quark-Engine\n\n![](https://i.imgur.com/HSJF3nj.png)\n\n# Introduction\n\nRoaming Mantis is a notorious malware that was first discovered in 2018 and aims at the Asian region. In the past two years, it has evolved and spread around the world. This malware intends to steal personal sensitive data (e.g. account information, SMS messages, and voice calls). Also, the malware bypassed the two-factor authentication by monitoring SMS messages.\n\nAccording to the report from Kaspersky Lab, the main distribution of this malware is using DNS hijacking through a compromised router. As long as the user connects to the router, their DNS lookup will be redirected to the malicious URL. After the user connects to the malicious website, they will be prompted to download the Google update application, which turns out to be the Android malware.\n\nIn this report, we focus on the APK downloaded by victims who were redirected to the malicious URL. We aim at showing how malware analysts can use Quark Engine to quickly understand what this malware does to the victim.\n\nThis malware contains a DEX file encoded by the base64 algorithm. Therefore, we will first demonstrate how we can use sets of detection rules to quickly find where to decode the base64 algorithm and where to load the DEX file in the malware.\n\nAfter decrypting the DEX file. We then further investigate malicious activities in the DEX file with sets of our detection rules. Also, we prove that obfuscation techniques are useless due to the magic design of Quark Engine.\n\nAll in all, we show that by using Quark and detection rule sets, malware analysis can be so much fun.\n\n\n# Investigating the Android APK\n\n## Summary Report for the APK\n\n![](https://i.imgur.com/Ycu9DTH.png)\n\nIn this report, our engine found 10 potential malicious activities with detection rules accordingly. As for the confidence, scores, and weight, please take a look at our talk at DEFCON Blue Team Village videos on YouTube. We explain everything there.\n\n{%youtube XK-yqHPnsvc %}\n\nThe scoring system will only take effect if we have enough detection rules. Before we accumulate enough rules, we set the scores and weights all the same. Therefore, the risk levels and total scores are for reference only.\n\nAfter generating the summary report, we then use an automatic technique to classify these 10 potential malicious activities.\n\n\n## Exploring Malicious Activities\n### Rule Classification: onCreate\n![](https://i.imgur.com/8Q1Ajf7.png)\n\nThe picture above shows that 5 suspicious activities were found under the function onCreate.\n\nThis picture can help malware analysts to understand the malware in an easy way.\n\nAs shown above, we found five behaviors in function onCreate. Despite that rules are not listed in the right order, we can still piece them together and tell a story.\n\nWith the descriptions in the table, we can simply and quickly guess that this function decodes and load the suspicious payload.\n\nAfter validating through reading the smali-like source codes, our guess is right!\n\nAnd the right order of the behaviors is:\n1. Get the absolute path of the file and store it in a string.\n2.  Open a file from the given absolute path of the file.\n3. Read a file from the assets directory.\n4. Write file after Base64 decoding.\n5. Load additional DEX files dynamically.\n\n### Rule Classification: a\n![](https://i.imgur.com/cB0ke4D.png)\n\nAs shown above, it is obvious that function a is about to do method reflection, MAGIC!\n\n### Rule Classification: run\n![](https://i.imgur.com/oJVy5b3.png)\n\nAnther method reflection detected!! MAGIC!\n\n# Decrypting the DEX file\n\nAs mentioned above, we know that the Roaming Mantis reads a file from the assets directory and uses Base64 to decode it. For further investigation, we find the file of the DEX payload.\n\n![](https://i.imgur.com/8isbtIy.png)\n\nAfter unzipping the \"assets/db\" file, we then use the Base64 to decode it and rename it Roaming_Mantis.dex.\n\n![](https://i.imgur.com/jsyEBYd.png)\n\nNow we have the DEX payload!.\n\n---\n\n## Summary Report of the DEX file\n\nNow, let's do the summary report again for the DEX payload, we found 37 suspicious activities.\n\n![](https://i.imgur.com/CrY5STX.png)\n\nWe simply summarize these suspicious behaviors into twelve categories.\n\n1. Connect to the remote server\n2. Start a web server\n3. Monitor/Delete/Send SMS/MMS\n4. Access network information\n5. Access phone information\n6. Access personal information\n7. Record audio/video\n8. Load external class\n9. Access currently running applications and installed packages\n10. Make a phone call\n11. Open a web page\n12. Install other APKs from the file\n\nNext, we will introduce some interesting and highly suspicious activities to you based on the above categories.\n\n## 1. Connect to the remote server\n### Rule Classification: a/b;a\n![](https://i.imgur.com/H2w1mJw.png)\n\nC2 connections are common in malware. This is a clue for further C2 investigation.\n\n## 2. Start a web server\n### Rule Classification: b/g;run\n![](https://i.imgur.com/4Wk6bYC.png)\n\nOur investigation proves that the malware starts a web server and tricks users into filling credentials like username, password, etc.\n\n## 3. Monitor/Delete/Send SMS/MMS\n### Rule Classification: com/n;b\n![](https://i.imgur.com/ZDz9lKw.png)\n### Rule Classification: com/Loader$s;onReceive\n![](https://i.imgur.com/HdtYquG.png)\n### Rule Classification: com/Loader;start\n![](https://i.imgur.com/bbiqb9e.png)\n\nOur investigation proves that these operations concerning SMS might launch activities like:\n\n1. Steal verification code for the two-factor authentication.\n2. Steal verification code during online purchasing.\n\n\n## 4. Access phone information\n### Rule Classification: a/a;a\n![](https://i.imgur.com/4q30DC6.png)\n### Rule Classification: com/Loader$ag$1;a\n![](https://i.imgur.com/qE24Cjr.png)\n\nOur investigation proves that these operations concerning \"access phone information\" might launch activities like:\n\n1. Query the IMEI number to targeting the Asian region.\n2. Check the SIM card status just make sure the victim's phone works.\n\n\n## 5. Record audio/video\n### Rule Classification: com/j;a\n![](https://i.imgur.com/7RCWH27.png)\n\nThrilling! This malware records your audio/video!\n\n\n# Conclusion\n\nThis report shows how malware analysts can use the quark engine to quickly guess behaviors of malware and to quickly validate their guess through call graphs and the classification table.\n\nIn this report, we show that Quark Engine bypassed the obfuscation techniques used in Roaming Mantis. Also, this time we provide some useful rule sets for the detection. E.g. detecting payload decryption, dex loader, method reflection, SMS operation, potential c2 connection etc. And all these rules are generated by using our auto-generate tools.\n\nWe're proud of our work and we love to play around with it.\n\nSo, if you want to take a sip of the quark engine. Please visit our GitHub  repository:\n* https://bit.ly/2ISYG2s\n\nAnd the rules used in this report.\n* https://bit.ly/3jAOkAv\n\nYou can generate rules by yourself if you can't wait for our next rule release!\n* https://bit.ly/2IJNxkE\n","slug":"Roaming-Mantis-with-Quark-Engine","published":1,"updated":"2021-10-07T06:49:17.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckugl61gw0006ivsagsds7g8u","content":"<h1 id=\"Analyze-Roaming-Mantis-with-Quark-Engine\"><a href=\"#Analyze-Roaming-Mantis-with-Quark-Engine\" class=\"headerlink\" title=\"Analyze Roaming Mantis with Quark-Engine\"></a>Analyze Roaming Mantis with Quark-Engine</h1><p><img src=\"https://i.imgur.com/HSJF3nj.png\"></p>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Roaming Mantis is a notorious malware that was first discovered in 2018 and aims at the Asian region. In the past two years, it has evolved and spread around the world. This malware intends to steal personal sensitive data (e.g. account information, SMS messages, and voice calls). Also, the malware bypassed the two-factor authentication by monitoring SMS messages.</p>\n<p>According to the report from Kaspersky Lab, the main distribution of this malware is using DNS hijacking through a compromised router. As long as the user connects to the router, their DNS lookup will be redirected to the malicious URL. After the user connects to the malicious website, they will be prompted to download the Google update application, which turns out to be the Android malware.</p>\n<p>In this report, we focus on the APK downloaded by victims who were redirected to the malicious URL. We aim at showing how malware analysts can use Quark Engine to quickly understand what this malware does to the victim.</p>\n<p>This malware contains a DEX file encoded by the base64 algorithm. Therefore, we will first demonstrate how we can use sets of detection rules to quickly find where to decode the base64 algorithm and where to load the DEX file in the malware.</p>\n<p>After decrypting the DEX file. We then further investigate malicious activities in the DEX file with sets of our detection rules. Also, we prove that obfuscation techniques are useless due to the magic design of Quark Engine.</p>\n<p>All in all, we show that by using Quark and detection rule sets, malware analysis can be so much fun.</p>\n<h1 id=\"Investigating-the-Android-APK\"><a href=\"#Investigating-the-Android-APK\" class=\"headerlink\" title=\"Investigating the Android APK\"></a>Investigating the Android APK</h1><h2 id=\"Summary-Report-for-the-APK\"><a href=\"#Summary-Report-for-the-APK\" class=\"headerlink\" title=\"Summary Report for the APK\"></a>Summary Report for the APK</h2><p><img src=\"https://i.imgur.com/Ycu9DTH.png\"></p>\n<p>In this report, our engine found 10 potential malicious activities with detection rules accordingly. As for the confidence, scores, and weight, please take a look at our talk at DEFCON Blue Team Village videos on YouTube. We explain everything there.</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/XK-yqHPnsvc\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n\n<p>The scoring system will only take effect if we have enough detection rules. Before we accumulate enough rules, we set the scores and weights all the same. Therefore, the risk levels and total scores are for reference only.</p>\n<p>After generating the summary report, we then use an automatic technique to classify these 10 potential malicious activities.</p>\n<h2 id=\"Exploring-Malicious-Activities\"><a href=\"#Exploring-Malicious-Activities\" class=\"headerlink\" title=\"Exploring Malicious Activities\"></a>Exploring Malicious Activities</h2><h3 id=\"Rule-Classification-onCreate\"><a href=\"#Rule-Classification-onCreate\" class=\"headerlink\" title=\"Rule Classification: onCreate\"></a>Rule Classification: onCreate</h3><p><img src=\"https://i.imgur.com/8Q1Ajf7.png\"></p>\n<p>The picture above shows that 5 suspicious activities were found under the function onCreate.</p>\n<p>This picture can help malware analysts to understand the malware in an easy way.</p>\n<p>As shown above, we found five behaviors in function onCreate. Despite that rules are not listed in the right order, we can still piece them together and tell a story.</p>\n<p>With the descriptions in the table, we can simply and quickly guess that this function decodes and load the suspicious payload.</p>\n<p>After validating through reading the smali-like source codes, our guess is right!</p>\n<p>And the right order of the behaviors is:</p>\n<ol>\n<li>Get the absolute path of the file and store it in a string.</li>\n<li>Open a file from the given absolute path of the file.</li>\n<li>Read a file from the assets directory.</li>\n<li>Write file after Base64 decoding.</li>\n<li>Load additional DEX files dynamically.</li>\n</ol>\n<h3 id=\"Rule-Classification-a\"><a href=\"#Rule-Classification-a\" class=\"headerlink\" title=\"Rule Classification: a\"></a>Rule Classification: a</h3><p><img src=\"https://i.imgur.com/cB0ke4D.png\"></p>\n<p>As shown above, it is obvious that function a is about to do method reflection, MAGIC!</p>\n<h3 id=\"Rule-Classification-run\"><a href=\"#Rule-Classification-run\" class=\"headerlink\" title=\"Rule Classification: run\"></a>Rule Classification: run</h3><p><img src=\"https://i.imgur.com/oJVy5b3.png\"></p>\n<p>Anther method reflection detected!! MAGIC!</p>\n<h1 id=\"Decrypting-the-DEX-file\"><a href=\"#Decrypting-the-DEX-file\" class=\"headerlink\" title=\"Decrypting the DEX file\"></a>Decrypting the DEX file</h1><p>As mentioned above, we know that the Roaming Mantis reads a file from the assets directory and uses Base64 to decode it. For further investigation, we find the file of the DEX payload.</p>\n<p><img src=\"https://i.imgur.com/8isbtIy.png\"></p>\n<p>After unzipping the “assets/db” file, we then use the Base64 to decode it and rename it Roaming_Mantis.dex.</p>\n<p><img src=\"https://i.imgur.com/jsyEBYd.png\"></p>\n<p>Now we have the DEX payload!.</p>\n<hr>\n<h2 id=\"Summary-Report-of-the-DEX-file\"><a href=\"#Summary-Report-of-the-DEX-file\" class=\"headerlink\" title=\"Summary Report of the DEX file\"></a>Summary Report of the DEX file</h2><p>Now, let’s do the summary report again for the DEX payload, we found 37 suspicious activities.</p>\n<p><img src=\"https://i.imgur.com/CrY5STX.png\"></p>\n<p>We simply summarize these suspicious behaviors into twelve categories.</p>\n<ol>\n<li>Connect to the remote server</li>\n<li>Start a web server</li>\n<li>Monitor/Delete/Send SMS/MMS</li>\n<li>Access network information</li>\n<li>Access phone information</li>\n<li>Access personal information</li>\n<li>Record audio/video</li>\n<li>Load external class</li>\n<li>Access currently running applications and installed packages</li>\n<li>Make a phone call</li>\n<li>Open a web page</li>\n<li>Install other APKs from the file</li>\n</ol>\n<p>Next, we will introduce some interesting and highly suspicious activities to you based on the above categories.</p>\n<h2 id=\"1-Connect-to-the-remote-server\"><a href=\"#1-Connect-to-the-remote-server\" class=\"headerlink\" title=\"1. Connect to the remote server\"></a>1. Connect to the remote server</h2><h3 id=\"Rule-Classification-a-b-a\"><a href=\"#Rule-Classification-a-b-a\" class=\"headerlink\" title=\"Rule Classification: a/b;a\"></a>Rule Classification: a/b;a</h3><p><img src=\"https://i.imgur.com/H2w1mJw.png\"></p>\n<p>C2 connections are common in malware. This is a clue for further C2 investigation.</p>\n<h2 id=\"2-Start-a-web-server\"><a href=\"#2-Start-a-web-server\" class=\"headerlink\" title=\"2. Start a web server\"></a>2. Start a web server</h2><h3 id=\"Rule-Classification-b-g-run\"><a href=\"#Rule-Classification-b-g-run\" class=\"headerlink\" title=\"Rule Classification: b/g;run\"></a>Rule Classification: b/g;run</h3><p><img src=\"https://i.imgur.com/4Wk6bYC.png\"></p>\n<p>Our investigation proves that the malware starts a web server and tricks users into filling credentials like username, password, etc.</p>\n<h2 id=\"3-Monitor-Delete-Send-SMS-MMS\"><a href=\"#3-Monitor-Delete-Send-SMS-MMS\" class=\"headerlink\" title=\"3. Monitor/Delete/Send SMS/MMS\"></a>3. Monitor/Delete/Send SMS/MMS</h2><h3 id=\"Rule-Classification-com-n-b\"><a href=\"#Rule-Classification-com-n-b\" class=\"headerlink\" title=\"Rule Classification: com/n;b\"></a>Rule Classification: com/n;b</h3><p><img src=\"https://i.imgur.com/ZDz9lKw.png\"></p>\n<h3 id=\"Rule-Classification-com-Loader-s-onReceive\"><a href=\"#Rule-Classification-com-Loader-s-onReceive\" class=\"headerlink\" title=\"Rule Classification: com/Loader$s;onReceive\"></a>Rule Classification: com/Loader$s;onReceive</h3><p><img src=\"https://i.imgur.com/HdtYquG.png\"></p>\n<h3 id=\"Rule-Classification-com-Loader-start\"><a href=\"#Rule-Classification-com-Loader-start\" class=\"headerlink\" title=\"Rule Classification: com/Loader;start\"></a>Rule Classification: com/Loader;start</h3><p><img src=\"https://i.imgur.com/bbiqb9e.png\"></p>\n<p>Our investigation proves that these operations concerning SMS might launch activities like:</p>\n<ol>\n<li>Steal verification code for the two-factor authentication.</li>\n<li>Steal verification code during online purchasing.</li>\n</ol>\n<h2 id=\"4-Access-phone-information\"><a href=\"#4-Access-phone-information\" class=\"headerlink\" title=\"4. Access phone information\"></a>4. Access phone information</h2><h3 id=\"Rule-Classification-a-a-a\"><a href=\"#Rule-Classification-a-a-a\" class=\"headerlink\" title=\"Rule Classification: a/a;a\"></a>Rule Classification: a/a;a</h3><p><img src=\"https://i.imgur.com/4q30DC6.png\"></p>\n<h3 id=\"Rule-Classification-com-Loader-ag-1-a\"><a href=\"#Rule-Classification-com-Loader-ag-1-a\" class=\"headerlink\" title=\"Rule Classification: com/Loader$ag$1;a\"></a>Rule Classification: com/Loader$ag$1;a</h3><p><img src=\"https://i.imgur.com/qE24Cjr.png\"></p>\n<p>Our investigation proves that these operations concerning “access phone information” might launch activities like:</p>\n<ol>\n<li>Query the IMEI number to targeting the Asian region.</li>\n<li>Check the SIM card status just make sure the victim’s phone works.</li>\n</ol>\n<h2 id=\"5-Record-audio-video\"><a href=\"#5-Record-audio-video\" class=\"headerlink\" title=\"5. Record audio/video\"></a>5. Record audio/video</h2><h3 id=\"Rule-Classification-com-j-a\"><a href=\"#Rule-Classification-com-j-a\" class=\"headerlink\" title=\"Rule Classification: com/j;a\"></a>Rule Classification: com/j;a</h3><p><img src=\"https://i.imgur.com/7RCWH27.png\"></p>\n<p>Thrilling! This malware records your audio/video!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This report shows how malware analysts can use the quark engine to quickly guess behaviors of malware and to quickly validate their guess through call graphs and the classification table.</p>\n<p>In this report, we show that Quark Engine bypassed the obfuscation techniques used in Roaming Mantis. Also, this time we provide some useful rule sets for the detection. E.g. detecting payload decryption, dex loader, method reflection, SMS operation, potential c2 connection etc. And all these rules are generated by using our auto-generate tools.</p>\n<p>We’re proud of our work and we love to play around with it.</p>\n<p>So, if you want to take a sip of the quark engine. Please visit our GitHub  repository:</p>\n<ul>\n<li><a href=\"https://bit.ly/2ISYG2s\">https://bit.ly/2ISYG2s</a></li>\n</ul>\n<p>And the rules used in this report.</p>\n<ul>\n<li><a href=\"https://bit.ly/3jAOkAv\">https://bit.ly/3jAOkAv</a></li>\n</ul>\n<p>You can generate rules by yourself if you can’t wait for our next rule release!</p>\n<ul>\n<li><a href=\"https://bit.ly/2IJNxkE\">https://bit.ly/2IJNxkE</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Analyze-Roaming-Mantis-with-Quark-Engine\"><a href=\"#Analyze-Roaming-Mantis-with-Quark-Engine\" class=\"headerlink\" title=\"Analyze Roaming Mantis with Quark-Engine\"></a>Analyze Roaming Mantis with Quark-Engine</h1><p><img src=\"https://i.imgur.com/HSJF3nj.png\"></p>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Roaming Mantis is a notorious malware that was first discovered in 2018 and aims at the Asian region. In the past two years, it has evolved and spread around the world. This malware intends to steal personal sensitive data (e.g. account information, SMS messages, and voice calls). Also, the malware bypassed the two-factor authentication by monitoring SMS messages.</p>\n<p>According to the report from Kaspersky Lab, the main distribution of this malware is using DNS hijacking through a compromised router. As long as the user connects to the router, their DNS lookup will be redirected to the malicious URL. After the user connects to the malicious website, they will be prompted to download the Google update application, which turns out to be the Android malware.</p>\n<p>In this report, we focus on the APK downloaded by victims who were redirected to the malicious URL. We aim at showing how malware analysts can use Quark Engine to quickly understand what this malware does to the victim.</p>\n<p>This malware contains a DEX file encoded by the base64 algorithm. Therefore, we will first demonstrate how we can use sets of detection rules to quickly find where to decode the base64 algorithm and where to load the DEX file in the malware.</p>\n<p>After decrypting the DEX file. We then further investigate malicious activities in the DEX file with sets of our detection rules. Also, we prove that obfuscation techniques are useless due to the magic design of Quark Engine.</p>\n<p>All in all, we show that by using Quark and detection rule sets, malware analysis can be so much fun.</p>\n<h1 id=\"Investigating-the-Android-APK\"><a href=\"#Investigating-the-Android-APK\" class=\"headerlink\" title=\"Investigating the Android APK\"></a>Investigating the Android APK</h1><h2 id=\"Summary-Report-for-the-APK\"><a href=\"#Summary-Report-for-the-APK\" class=\"headerlink\" title=\"Summary Report for the APK\"></a>Summary Report for the APK</h2><p><img src=\"https://i.imgur.com/Ycu9DTH.png\"></p>\n<p>In this report, our engine found 10 potential malicious activities with detection rules accordingly. As for the confidence, scores, and weight, please take a look at our talk at DEFCON Blue Team Village videos on YouTube. We explain everything there.</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/XK-yqHPnsvc\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n\n<p>The scoring system will only take effect if we have enough detection rules. Before we accumulate enough rules, we set the scores and weights all the same. Therefore, the risk levels and total scores are for reference only.</p>\n<p>After generating the summary report, we then use an automatic technique to classify these 10 potential malicious activities.</p>\n<h2 id=\"Exploring-Malicious-Activities\"><a href=\"#Exploring-Malicious-Activities\" class=\"headerlink\" title=\"Exploring Malicious Activities\"></a>Exploring Malicious Activities</h2><h3 id=\"Rule-Classification-onCreate\"><a href=\"#Rule-Classification-onCreate\" class=\"headerlink\" title=\"Rule Classification: onCreate\"></a>Rule Classification: onCreate</h3><p><img src=\"https://i.imgur.com/8Q1Ajf7.png\"></p>\n<p>The picture above shows that 5 suspicious activities were found under the function onCreate.</p>\n<p>This picture can help malware analysts to understand the malware in an easy way.</p>\n<p>As shown above, we found five behaviors in function onCreate. Despite that rules are not listed in the right order, we can still piece them together and tell a story.</p>\n<p>With the descriptions in the table, we can simply and quickly guess that this function decodes and load the suspicious payload.</p>\n<p>After validating through reading the smali-like source codes, our guess is right!</p>\n<p>And the right order of the behaviors is:</p>\n<ol>\n<li>Get the absolute path of the file and store it in a string.</li>\n<li>Open a file from the given absolute path of the file.</li>\n<li>Read a file from the assets directory.</li>\n<li>Write file after Base64 decoding.</li>\n<li>Load additional DEX files dynamically.</li>\n</ol>\n<h3 id=\"Rule-Classification-a\"><a href=\"#Rule-Classification-a\" class=\"headerlink\" title=\"Rule Classification: a\"></a>Rule Classification: a</h3><p><img src=\"https://i.imgur.com/cB0ke4D.png\"></p>\n<p>As shown above, it is obvious that function a is about to do method reflection, MAGIC!</p>\n<h3 id=\"Rule-Classification-run\"><a href=\"#Rule-Classification-run\" class=\"headerlink\" title=\"Rule Classification: run\"></a>Rule Classification: run</h3><p><img src=\"https://i.imgur.com/oJVy5b3.png\"></p>\n<p>Anther method reflection detected!! MAGIC!</p>\n<h1 id=\"Decrypting-the-DEX-file\"><a href=\"#Decrypting-the-DEX-file\" class=\"headerlink\" title=\"Decrypting the DEX file\"></a>Decrypting the DEX file</h1><p>As mentioned above, we know that the Roaming Mantis reads a file from the assets directory and uses Base64 to decode it. For further investigation, we find the file of the DEX payload.</p>\n<p><img src=\"https://i.imgur.com/8isbtIy.png\"></p>\n<p>After unzipping the “assets/db” file, we then use the Base64 to decode it and rename it Roaming_Mantis.dex.</p>\n<p><img src=\"https://i.imgur.com/jsyEBYd.png\"></p>\n<p>Now we have the DEX payload!.</p>\n<hr>\n<h2 id=\"Summary-Report-of-the-DEX-file\"><a href=\"#Summary-Report-of-the-DEX-file\" class=\"headerlink\" title=\"Summary Report of the DEX file\"></a>Summary Report of the DEX file</h2><p>Now, let’s do the summary report again for the DEX payload, we found 37 suspicious activities.</p>\n<p><img src=\"https://i.imgur.com/CrY5STX.png\"></p>\n<p>We simply summarize these suspicious behaviors into twelve categories.</p>\n<ol>\n<li>Connect to the remote server</li>\n<li>Start a web server</li>\n<li>Monitor/Delete/Send SMS/MMS</li>\n<li>Access network information</li>\n<li>Access phone information</li>\n<li>Access personal information</li>\n<li>Record audio/video</li>\n<li>Load external class</li>\n<li>Access currently running applications and installed packages</li>\n<li>Make a phone call</li>\n<li>Open a web page</li>\n<li>Install other APKs from the file</li>\n</ol>\n<p>Next, we will introduce some interesting and highly suspicious activities to you based on the above categories.</p>\n<h2 id=\"1-Connect-to-the-remote-server\"><a href=\"#1-Connect-to-the-remote-server\" class=\"headerlink\" title=\"1. Connect to the remote server\"></a>1. Connect to the remote server</h2><h3 id=\"Rule-Classification-a-b-a\"><a href=\"#Rule-Classification-a-b-a\" class=\"headerlink\" title=\"Rule Classification: a/b;a\"></a>Rule Classification: a/b;a</h3><p><img src=\"https://i.imgur.com/H2w1mJw.png\"></p>\n<p>C2 connections are common in malware. This is a clue for further C2 investigation.</p>\n<h2 id=\"2-Start-a-web-server\"><a href=\"#2-Start-a-web-server\" class=\"headerlink\" title=\"2. Start a web server\"></a>2. Start a web server</h2><h3 id=\"Rule-Classification-b-g-run\"><a href=\"#Rule-Classification-b-g-run\" class=\"headerlink\" title=\"Rule Classification: b/g;run\"></a>Rule Classification: b/g;run</h3><p><img src=\"https://i.imgur.com/4Wk6bYC.png\"></p>\n<p>Our investigation proves that the malware starts a web server and tricks users into filling credentials like username, password, etc.</p>\n<h2 id=\"3-Monitor-Delete-Send-SMS-MMS\"><a href=\"#3-Monitor-Delete-Send-SMS-MMS\" class=\"headerlink\" title=\"3. Monitor/Delete/Send SMS/MMS\"></a>3. Monitor/Delete/Send SMS/MMS</h2><h3 id=\"Rule-Classification-com-n-b\"><a href=\"#Rule-Classification-com-n-b\" class=\"headerlink\" title=\"Rule Classification: com/n;b\"></a>Rule Classification: com/n;b</h3><p><img src=\"https://i.imgur.com/ZDz9lKw.png\"></p>\n<h3 id=\"Rule-Classification-com-Loader-s-onReceive\"><a href=\"#Rule-Classification-com-Loader-s-onReceive\" class=\"headerlink\" title=\"Rule Classification: com/Loader$s;onReceive\"></a>Rule Classification: com/Loader$s;onReceive</h3><p><img src=\"https://i.imgur.com/HdtYquG.png\"></p>\n<h3 id=\"Rule-Classification-com-Loader-start\"><a href=\"#Rule-Classification-com-Loader-start\" class=\"headerlink\" title=\"Rule Classification: com/Loader;start\"></a>Rule Classification: com/Loader;start</h3><p><img src=\"https://i.imgur.com/bbiqb9e.png\"></p>\n<p>Our investigation proves that these operations concerning SMS might launch activities like:</p>\n<ol>\n<li>Steal verification code for the two-factor authentication.</li>\n<li>Steal verification code during online purchasing.</li>\n</ol>\n<h2 id=\"4-Access-phone-information\"><a href=\"#4-Access-phone-information\" class=\"headerlink\" title=\"4. Access phone information\"></a>4. Access phone information</h2><h3 id=\"Rule-Classification-a-a-a\"><a href=\"#Rule-Classification-a-a-a\" class=\"headerlink\" title=\"Rule Classification: a/a;a\"></a>Rule Classification: a/a;a</h3><p><img src=\"https://i.imgur.com/4q30DC6.png\"></p>\n<h3 id=\"Rule-Classification-com-Loader-ag-1-a\"><a href=\"#Rule-Classification-com-Loader-ag-1-a\" class=\"headerlink\" title=\"Rule Classification: com/Loader$ag$1;a\"></a>Rule Classification: com/Loader$ag$1;a</h3><p><img src=\"https://i.imgur.com/qE24Cjr.png\"></p>\n<p>Our investigation proves that these operations concerning “access phone information” might launch activities like:</p>\n<ol>\n<li>Query the IMEI number to targeting the Asian region.</li>\n<li>Check the SIM card status just make sure the victim’s phone works.</li>\n</ol>\n<h2 id=\"5-Record-audio-video\"><a href=\"#5-Record-audio-video\" class=\"headerlink\" title=\"5. Record audio/video\"></a>5. Record audio/video</h2><h3 id=\"Rule-Classification-com-j-a\"><a href=\"#Rule-Classification-com-j-a\" class=\"headerlink\" title=\"Rule Classification: com/j;a\"></a>Rule Classification: com/j;a</h3><p><img src=\"https://i.imgur.com/7RCWH27.png\"></p>\n<p>Thrilling! This malware records your audio/video!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This report shows how malware analysts can use the quark engine to quickly guess behaviors of malware and to quickly validate their guess through call graphs and the classification table.</p>\n<p>In this report, we show that Quark Engine bypassed the obfuscation techniques used in Roaming Mantis. Also, this time we provide some useful rule sets for the detection. E.g. detecting payload decryption, dex loader, method reflection, SMS operation, potential c2 connection etc. And all these rules are generated by using our auto-generate tools.</p>\n<p>We’re proud of our work and we love to play around with it.</p>\n<p>So, if you want to take a sip of the quark engine. Please visit our GitHub  repository:</p>\n<ul>\n<li><a href=\"https://bit.ly/2ISYG2s\">https://bit.ly/2ISYG2s</a></li>\n</ul>\n<p>And the rules used in this report.</p>\n<ul>\n<li><a href=\"https://bit.ly/3jAOkAv\">https://bit.ly/3jAOkAv</a></li>\n</ul>\n<p>You can generate rules by yourself if you can’t wait for our next rule release!</p>\n<ul>\n<li><a href=\"https://bit.ly/2IJNxkE\">https://bit.ly/2IJNxkE</a></li>\n</ul>\n"},{"title":"pipenv","date":"2020-09-24T06:15:06.000Z","_content":"\n# Install from github\n```bash=\npipenv install -e git+https://github.com/quark-engine/quark-engine.git#egg=quark-engine\n```\n* First \"quark-enigne\": user\n* Second \"quark-engine\": repo\n* @develop: The branch what you want to install\n* #egg=quark-engine: The package name that will be recorded in pipenv\n","source":"_posts/pipenv.md","raw":"---\ntitle: [pipenv]\ndate: 2020-09-24 14:15:06\ntags:\n- python\n- git\n---\n\n# Install from github\n```bash=\npipenv install -e git+https://github.com/quark-engine/quark-engine.git#egg=quark-engine\n```\n* First \"quark-enigne\": user\n* Second \"quark-engine\": repo\n* @develop: The branch what you want to install\n* #egg=quark-engine: The package name that will be recorded in pipenv\n","slug":"pipenv","published":1,"updated":"2021-10-07T06:49:17.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckugl61gx0007ivsa4wyg8mso","content":"<h1 id=\"Install-from-github\"><a href=\"#Install-from-github\" class=\"headerlink\" title=\"Install from github\"></a>Install from github</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv install -e git+https://github.com/quark-engine/quark-engine.git<span class=\"comment\">#egg=quark-engine</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>First “quark-enigne”: user</li>\n<li>Second “quark-engine”: repo</li>\n<li>@develop: The branch what you want to install</li>\n<li>#egg=quark-engine: The package name that will be recorded in pipenv</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Install-from-github\"><a href=\"#Install-from-github\" class=\"headerlink\" title=\"Install from github\"></a>Install from github</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pipenv install -e git+https://github.com/quark-engine/quark-engine.git<span class=\"comment\">#egg=quark-engine</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>First “quark-enigne”: user</li>\n<li>Second “quark-engine”: repo</li>\n<li>@develop: The branch what you want to install</li>\n<li>#egg=quark-engine: The package name that will be recorded in pipenv</li>\n</ul>\n"},{"title":"How to draft a new release on PyPi with Github Action","date":"2021-10-07T06:54:14.000Z","_content":"\n# How to draft a new release on PyPi with Github Action\n\nAfter updating the version from everywhere in the codebase such as [`__init__.py`](https://github.com/quark-engine/quark-engine/blob/master/quark/__init__.py), [`docs`](https://github.com/quark-engine/quark-engine/blob/245c77c1e1dc9599bae1be0a76a13ebe86c58549/docs/source/conf.py#L25) and [`debian package`](https://github.com/quark-engine/quark-engine/blob/245c77c1e1dc9599bae1be0a76a13ebe86c58549/debian/control#L20), you can click \"Releases\" for drafting a new version release.\n\n![](https://i.imgur.com/c7JO72j.png)\n\nAfter that, you can click the \"Draft a new release\".\n\n![](https://i.imgur.com/bnApXxl.png)\n\nThe next step is to fill out the version number you want to release, and the changelog from the last release to now.\n\n![](https://i.imgur.com/CzMaMTw.png)\n\nAfter completing the information for this version, you can click \"Publish release\" to publish this version.\n\n![](https://i.imgur.com/B3DXFpW.png)\n\nOnce this version is released, [Github Action](https://github.com/quark-engine/quark-engine/actions/workflows/pythonpublish.yml) will initiate a process to publish it on PyPi automatically.\n\n![](https://i.imgur.com/mbMR7Uo.png)\n\n:::info\nPlease note that there is a limitation that you cannot upload twice with the same release version number.\n\n\n","source":"_posts/How-to-draft-a-new-release-on-PyPi-with-Github-Action.md","raw":"---\ntitle: How to draft a new release on PyPi with Github Action\ndate: 2021-10-07 14:54:14\ntags: python, github, release\n---\n\n# How to draft a new release on PyPi with Github Action\n\nAfter updating the version from everywhere in the codebase such as [`__init__.py`](https://github.com/quark-engine/quark-engine/blob/master/quark/__init__.py), [`docs`](https://github.com/quark-engine/quark-engine/blob/245c77c1e1dc9599bae1be0a76a13ebe86c58549/docs/source/conf.py#L25) and [`debian package`](https://github.com/quark-engine/quark-engine/blob/245c77c1e1dc9599bae1be0a76a13ebe86c58549/debian/control#L20), you can click \"Releases\" for drafting a new version release.\n\n![](https://i.imgur.com/c7JO72j.png)\n\nAfter that, you can click the \"Draft a new release\".\n\n![](https://i.imgur.com/bnApXxl.png)\n\nThe next step is to fill out the version number you want to release, and the changelog from the last release to now.\n\n![](https://i.imgur.com/CzMaMTw.png)\n\nAfter completing the information for this version, you can click \"Publish release\" to publish this version.\n\n![](https://i.imgur.com/B3DXFpW.png)\n\nOnce this version is released, [Github Action](https://github.com/quark-engine/quark-engine/actions/workflows/pythonpublish.yml) will initiate a process to publish it on PyPi automatically.\n\n![](https://i.imgur.com/mbMR7Uo.png)\n\n:::info\nPlease note that there is a limitation that you cannot upload twice with the same release version number.\n\n\n","slug":"How-to-draft-a-new-release-on-PyPi-with-Github-Action","published":1,"updated":"2021-10-07T06:54:46.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckugl61gy0008ivsa9e1uc0xv","content":"<h1 id=\"How-to-draft-a-new-release-on-PyPi-with-Github-Action\"><a href=\"#How-to-draft-a-new-release-on-PyPi-with-Github-Action\" class=\"headerlink\" title=\"How to draft a new release on PyPi with Github Action\"></a>How to draft a new release on PyPi with Github Action</h1><p>After updating the version from everywhere in the codebase such as <a href=\"https://github.com/quark-engine/quark-engine/blob/master/quark/__init__.py\"><code>__init__.py</code></a>, <a href=\"https://github.com/quark-engine/quark-engine/blob/245c77c1e1dc9599bae1be0a76a13ebe86c58549/docs/source/conf.py#L25\"><code>docs</code></a> and <a href=\"https://github.com/quark-engine/quark-engine/blob/245c77c1e1dc9599bae1be0a76a13ebe86c58549/debian/control#L20\"><code>debian package</code></a>, you can click “Releases” for drafting a new version release.</p>\n<p><img src=\"https://i.imgur.com/c7JO72j.png\"></p>\n<p>After that, you can click the “Draft a new release”.</p>\n<p><img src=\"https://i.imgur.com/bnApXxl.png\"></p>\n<p>The next step is to fill out the version number you want to release, and the changelog from the last release to now.</p>\n<p><img src=\"https://i.imgur.com/CzMaMTw.png\"></p>\n<p>After completing the information for this version, you can click “Publish release” to publish this version.</p>\n<p><img src=\"https://i.imgur.com/B3DXFpW.png\"></p>\n<p>Once this version is released, <a href=\"https://github.com/quark-engine/quark-engine/actions/workflows/pythonpublish.yml\">Github Action</a> will initiate a process to publish it on PyPi automatically.</p>\n<p><img src=\"https://i.imgur.com/mbMR7Uo.png\"></p>\n<p>:::info<br>Please note that there is a limitation that you cannot upload twice with the same release version number.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"How-to-draft-a-new-release-on-PyPi-with-Github-Action\"><a href=\"#How-to-draft-a-new-release-on-PyPi-with-Github-Action\" class=\"headerlink\" title=\"How to draft a new release on PyPi with Github Action\"></a>How to draft a new release on PyPi with Github Action</h1><p>After updating the version from everywhere in the codebase such as <a href=\"https://github.com/quark-engine/quark-engine/blob/master/quark/__init__.py\"><code>__init__.py</code></a>, <a href=\"https://github.com/quark-engine/quark-engine/blob/245c77c1e1dc9599bae1be0a76a13ebe86c58549/docs/source/conf.py#L25\"><code>docs</code></a> and <a href=\"https://github.com/quark-engine/quark-engine/blob/245c77c1e1dc9599bae1be0a76a13ebe86c58549/debian/control#L20\"><code>debian package</code></a>, you can click “Releases” for drafting a new version release.</p>\n<p><img src=\"https://i.imgur.com/c7JO72j.png\"></p>\n<p>After that, you can click the “Draft a new release”.</p>\n<p><img src=\"https://i.imgur.com/bnApXxl.png\"></p>\n<p>The next step is to fill out the version number you want to release, and the changelog from the last release to now.</p>\n<p><img src=\"https://i.imgur.com/CzMaMTw.png\"></p>\n<p>After completing the information for this version, you can click “Publish release” to publish this version.</p>\n<p><img src=\"https://i.imgur.com/B3DXFpW.png\"></p>\n<p>Once this version is released, <a href=\"https://github.com/quark-engine/quark-engine/actions/workflows/pythonpublish.yml\">Github Action</a> will initiate a process to publish it on PyPi automatically.</p>\n<p><img src=\"https://i.imgur.com/mbMR7Uo.png\"></p>\n<p>:::info<br>Please note that there is a limitation that you cannot upload twice with the same release version number.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckugl61gn0001ivsab7jfbt4g","tag_id":"ckugl61gu0004ivsabcx1hx0n","_id":"ckugl61h1000civsafhdx3smk"},{"post_id":"ckugl61gn0001ivsab7jfbt4g","tag_id":"ckugl61gz0009ivsadfabbmrg","_id":"ckugl61h2000divsaegti7ylt"},{"post_id":"ckugl61gn0001ivsab7jfbt4g","tag_id":"ckugl61h0000aivsahvpc6kod","_id":"ckugl61h2000fivsa09db9926"},{"post_id":"ckugl61gw0006ivsagsds7g8u","tag_id":"ckugl61h1000bivsa80qlbdtr","_id":"ckugl61h2000givsabyiad6y6"},{"post_id":"ckugl61gx0007ivsa4wyg8mso","tag_id":"ckugl61h2000eivsa70jk3zk2","_id":"ckugl61h3000jivsa5cqw3r4y"},{"post_id":"ckugl61gx0007ivsa4wyg8mso","tag_id":"ckugl61h2000hivsa0ymtbbne","_id":"ckugl61h3000kivsa04r3362a"},{"post_id":"ckugl61gy0008ivsa9e1uc0xv","tag_id":"ckugl61h3000iivsa7coz0k7k","_id":"ckugl61h3000livsa758t8bj3"}],"Tag":[{"name":"Debian","_id":"ckugl61gu0004ivsabcx1hx0n"},{"name":"Linux","_id":"ckugl61gz0009ivsadfabbmrg"},{"name":"Kali Linux","_id":"ckugl61h0000aivsahvpc6kod"},{"name":"Android, Malware","_id":"ckugl61h1000bivsa80qlbdtr"},{"name":"python","_id":"ckugl61h2000eivsa70jk3zk2"},{"name":"git","_id":"ckugl61h2000hivsa0ymtbbne"},{"name":"python, github, release","_id":"ckugl61h3000iivsa7coz0k7k"}]}}
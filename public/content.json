{"meta":{"title":"JunWei Song' Blog","subtitle":"Code it, and break it","description":"","author":"JunWei Song","url":"https://krnick.github.io"},"pages":[{"title":"About","date":"2021-10-08T07:01:44.094Z","updated":"2021-10-08T07:01:44.094Z","comments":false,"path":"about/index.html","permalink":"https://krnick.github.io/about/index.html","excerpt":"","text":"Hi there üëãWho am IJunWei is a security researcher and open-source enthusiast from Taiwan. A paranoid Pythonista and CPython contributor who now focuses on Android reverse engineering and malware analysis. And as a member of the PyCon Taiwan Program Committee, previously presented at Black Hat, DEFCON, HITB, ROOTCON, GrayHat, PyCon Europe/TW/KR/MY/IN. He‚Äôs the co-founder of Quark-Engine and the Quark package maintainer on Kali Linux, leading Quark to participate in the GSoC under the Honeynet Project since 2021. Google summer of code 2021 MentorPyCon Taiwan 2022 Program Chair My Previous Talks The projects I am currently working on: Resume (English Version)","raw":null,"content":null},{"title":"Tags","date":"2020-09-23T05:06:01.000Z","updated":"2021-10-08T07:19:14.686Z","comments":false,"path":"tags/index.html","permalink":"https://krnick.github.io/tags/index.html","excerpt":"","text":"","raw":null,"content":null},{"title":"Categories","date":"2020-09-23T05:06:09.000Z","updated":"2021-10-08T07:19:01.441Z","comments":false,"path":"categories/index.html","permalink":"https://krnick.github.io/categories/index.html","excerpt":"","text":"","raw":null,"content":null}],"posts":[{"title":"How to draft a new release on PyPi with Github Action","slug":"How-to-draft-a-new-release-on-PyPi-with-Github-Action","date":"2021-10-07T06:54:14.000Z","updated":"2021-10-08T07:01:44.093Z","comments":true,"path":"2021/10/07/How-to-draft-a-new-release-on-PyPi-with-Github-Action/","link":"","permalink":"https://krnick.github.io/2021/10/07/How-to-draft-a-new-release-on-PyPi-with-Github-Action/","excerpt":"","text":"How to draft a new release on PyPi with Github ActionAfter updating the version from everywhere in the codebase such as __init__.py, docs and debian package, you can click ‚ÄúReleases‚Äù for drafting a new version release. After that, you can click the ‚ÄúDraft a new release‚Äù. The next step is to fill out the version number you want to release, and the changelog from the last release to now. After completing the information for this version, you can click ‚ÄúPublish release‚Äù to publish this version. Once this version is released, Github Action will initiate a process to publish it on PyPi automatically. :::infoPlease note that there is a limitation that you cannot upload twice with the same release version number.","raw":null,"content":null,"categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://krnick.github.io/tags/python/"},{"name":"github","slug":"github","permalink":"https://krnick.github.io/tags/github/"},{"name":"pypi","slug":"pypi","permalink":"https://krnick.github.io/tags/pypi/"}]},{"title":"Roaming Mantis with Quark-Engine","slug":"Roaming-Mantis-with-Quark-Engine","date":"2021-09-30T10:02:23.000Z","updated":"2021-10-08T07:01:44.093Z","comments":true,"path":"2021/09/30/Roaming-Mantis-with-Quark-Engine/","link":"","permalink":"https://krnick.github.io/2021/09/30/Roaming-Mantis-with-Quark-Engine/","excerpt":"","text":"Analyze Roaming Mantis with Quark-Engine IntroductionRoaming Mantis is a notorious malware that was first discovered in 2018 and aims at the Asian region. In the past two years, it has evolved and spread around the world. This malware intends to steal personal sensitive data (e.g. account information, SMS messages, and voice calls). Also, the malware bypassed the two-factor authentication by monitoring SMS messages. According to the report from Kaspersky Lab, the main distribution of this malware is using DNS hijacking through a compromised router. As long as the user connects to the router, their DNS lookup will be redirected to the malicious URL. After the user connects to the malicious website, they will be prompted to download the Google update application, which turns out to be the Android malware. In this report, we focus on the APK downloaded by victims who were redirected to the malicious URL. We aim at showing how malware analysts can use Quark Engine to quickly understand what this malware does to the victim. This malware contains a DEX file encoded by the base64 algorithm. Therefore, we will first demonstrate how we can use sets of detection rules to quickly find where to decode the base64 algorithm and where to load the DEX file in the malware. After decrypting the DEX file. We then further investigate malicious activities in the DEX file with sets of our detection rules. Also, we prove that obfuscation techniques are useless due to the magic design of Quark Engine. All in all, we show that by using Quark and detection rule sets, malware analysis can be so much fun. Investigating the Android APKSummary Report for the APK In this report, our engine found 10 potential malicious activities with detection rules accordingly. As for the confidence, scores, and weight, please take a look at our talk at DEFCON Blue Team Village videos on YouTube. We explain everything there. The scoring system will only take effect if we have enough detection rules. Before we accumulate enough rules, we set the scores and weights all the same. Therefore, the risk levels and total scores are for reference only. After generating the summary report, we then use an automatic technique to classify these 10 potential malicious activities. Exploring Malicious ActivitiesRule Classification: onCreate The picture above shows that 5 suspicious activities were found under the function onCreate. This picture can help malware analysts to understand the malware in an easy way. As shown above, we found five behaviors in function onCreate. Despite that rules are not listed in the right order, we can still piece them together and tell a story. With the descriptions in the table, we can simply and quickly guess that this function decodes and load the suspicious payload. After validating through reading the smali-like source codes, our guess is right! And the right order of the behaviors is: Get the absolute path of the file and store it in a string. Open a file from the given absolute path of the file. Read a file from the assets directory. Write file after Base64 decoding. Load additional DEX files dynamically. Rule Classification: a As shown above, it is obvious that function a is about to do method reflection, MAGIC! Rule Classification: run Anther method reflection detected!! MAGIC! Decrypting the DEX fileAs mentioned above, we know that the Roaming Mantis reads a file from the assets directory and uses Base64 to decode it. For further investigation, we find the file of the DEX payload. After unzipping the ‚Äúassets/db‚Äù file, we then use the Base64 to decode it and rename it Roaming_Mantis.dex. Now we have the DEX payload!. Summary Report of the DEX fileNow, let‚Äôs do the summary report again for the DEX payload, we found 37 suspicious activities. We simply summarize these suspicious behaviors into twelve categories. Connect to the remote server Start a web server Monitor/Delete/Send SMS/MMS Access network information Access phone information Access personal information Record audio/video Load external class Access currently running applications and installed packages Make a phone call Open a web page Install other APKs from the file Next, we will introduce some interesting and highly suspicious activities to you based on the above categories. 1. Connect to the remote serverRule Classification: a/b;a C2 connections are common in malware. This is a clue for further C2 investigation. 2. Start a web serverRule Classification: b/g;run Our investigation proves that the malware starts a web server and tricks users into filling credentials like username, password, etc. 3. Monitor/Delete/Send SMS/MMSRule Classification: com/n;b Rule Classification: com/Loader$s;onReceive Rule Classification: com/Loader;start Our investigation proves that these operations concerning SMS might launch activities like: Steal verification code for the two-factor authentication. Steal verification code during online purchasing. 4. Access phone informationRule Classification: a/a;a Rule Classification: com/Loader$ag$1;a Our investigation proves that these operations concerning ‚Äúaccess phone information‚Äù might launch activities like: Query the IMEI number to targeting the Asian region. Check the SIM card status just make sure the victim‚Äôs phone works. 5. Record audio/videoRule Classification: com/j;a Thrilling! This malware records your audio/video! ConclusionThis report shows how malware analysts can use the quark engine to quickly guess behaviors of malware and to quickly validate their guess through call graphs and the classification table. In this report, we show that Quark Engine bypassed the obfuscation techniques used in Roaming Mantis. Also, this time we provide some useful rule sets for the detection. E.g. detecting payload decryption, dex loader, method reflection, SMS operation, potential c2 connection etc. And all these rules are generated by using our auto-generate tools. We‚Äôre proud of our work and we love to play around with it. So, if you want to take a sip of the quark engine. Please visit our GitHub repository: https://bit.ly/2ISYG2s And the rules used in this report. https://bit.ly/3jAOkAv You can generate rules by yourself if you can‚Äôt wait for our next rule release! https://bit.ly/2IJNxkE","raw":null,"content":null,"categories":[],"tags":[{"name":"android","slug":"android","permalink":"https://krnick.github.io/tags/android/"},{"name":"malware","slug":"malware","permalink":"https://krnick.github.io/tags/malware/"}]},{"title":"CVE-2019-9674 Zip bomb vulnerability in CPython Lib/zipfile.py","slug":"CPython-zipfile-Code-Tracing","date":"2021-09-30T08:39:10.000Z","updated":"2021-10-08T07:01:44.092Z","comments":true,"path":"2021/09/30/CPython-zipfile-Code-Tracing/","link":"","permalink":"https://krnick.github.io/2021/09/30/CPython-zipfile-Code-Tracing/","excerpt":"","text":"BackgroundI reported a zip bomb vulnerability to the CPython community in 2019. Here are all the interesting resources and ideas. Issue Discussion on BPO CVE-2019-9674 Decompression pitfall I wrote for official documentation Pull Request related it PyCon Korea 2019 - Click Click Boom! Bombs Over Our Minds zipfile analysisAccording to Black Hat‚Äôs Cara Marie research, there are some solutions against Zip Bomb. By limiting the size of the block to be read at a time, if there is still data remaining after the block that needs to be decompressed after reading this block, it is considered that it is possible to be a Zip Bomb. Below is Cara Marie code 12345678import zlibdef decompress(data, maxsize=1024000): dec = zlib.decompressobj() data = dec.decompress(data, maxsize) if dec.unconsumed_tail: raise ValueError(&quot;Possible bomb&quot;) del dec return data As you can see, the strategy to defeating the zip bomb is by limiting a block, in this case, is max size 102400. However, we take a look at the Python standard library, zipfile. According to Cara Marie‚Äôs approach, we try to figure out the difference between zipfile and zlib and why we can‚Äôt use zipfile directly for preventing zip bombs, so we started to study zipfile source code. zipfileSince I focus on the zip format and pick the most commonly used algorithm, DEFLATED algorithm. Inside the zipfile, we can see the location of unzipped function, starting at line 702, getting the zlib object, and finally returning the object. zlib.decompressobj(-15) 123456789101112131415def _get_decompressor(compress_type): if compress_type == ZIP_STORED: return None elif compress_type == ZIP_DEFLATED: return zlib.decompressobj(-15) elif compress_type == ZIP_BZIP2: return bz2.BZ2Decompressor() elif compress_type == ZIP_LZMA: return LZMADecompressor() else: descr = compressor_names.get(compress_type) if descr: raise NotImplementedError(&quot;compression type %d (%s)&quot; % (compress_type, descr)) else: raise NotImplementedError(&quot;compression type %d&quot; % (compress_type,)) From the above code, we can know that the zipfile is based on what zlib does. So we have to deep dive into what zlib did? zlibAccording to the zlib documentation There are two ways to compression and decompression, .compress() and .decompress() will fit all files into memory at once. In contrast to the method of the object. It using .compressobj() and .decompressobj() which won‚Äôt fit into memory at once. There are two ways to compress/decompress. .compress() and .decompress() will put the entire file into memory at a time .compressobj() and .decompressobj() separate the file , compress/decompress one block at a time However, the official documentation does not clearly explain how to use the API to decompress files. The purpose of this method is to obtain the file data stream and decompress it through the Low-Level method. And we went back to the zipfile module and found that they had already done the decompression of zlib, so we planned to apply the patch for zipfile first. In the way that zipfile belongs to decompressobj, we have the first way to accumulate chunks. As long as we can find out where to do the decompression of chunks, we accumulate it and give a threshold. If it exceeds, then consider that it is possible to be the zip bomb. Get back at the zipfile Starting with the object Line 706 1return zlib.decompressobj(-15) Line 791 It is the place where the class of zlib.decompressobj(-15) object is obtained and initialized. which belongs to ZipExtFile class 1def __init__(self, fileobj, mode, zipinfo, decrypter=None,close_fileobj=False): Let‚Äôs find out what fileobj is Line 1545 1return ZipExtFile(zef_file, mode, zinfo, zd, True) Return the class, and use zef_file, then follow zef_file Line 719 _SharedFile being initialized 1def __init__(self, file, pos, close, lock, writing): Here we know that when zlib is decompressed, you can‚Äôt start decompressing directly to Streaming, and you need to skip the file encoding in front of the zip file. Line 759 In class _Tellable: to initialize the position of the indicator that gets the file descriptor 123def __init__(self, fp): self.fp = fp self.offset = 0 and then Line 977 12345678910elif self._compress_type == ZIP_DEFLATED: n = max(n, self.MIN_READ_SIZE) data = self._decompressor.decompress(data, n) self._eof = (self._decompressor.eof or self._compress_left &lt;= 0 and not self._decompressor.unconsumed_tail) if self._eof: data += self._decompressor.flush() We observed that after choosing to use the ZIP_DEFLATED compression algorithm, we did a function max to get n. Key Point1max(n, self.MIN_READ_SIZE) When you use zlib.decompressobj as a block, how big is your block?, self.MIN_READ_SIZE is preset to 4096 bytes, which is the size of a page in the operating system. Cara Marie‚Äôs solution12345678import zlibdef decompress(data, maxsize=1024000): dec = zlib.decompressobj() data = dec.decompress(data, maxsize) if dec.unconsumed_tail: raise ValueError(&quot;Possible bomb&quot;) del dec return data It sets maxsize to 102400 bytesAccording to the official document Decompress.decompress(data, max_length=0)Decompress data, returning a bytes object containing the uncompressed data corresponding to at least part of the data in the string. This data should be concatenated to the output produced by any preceding calls to the decompress() method. Some of the input data may be preserved in internal buffers for later processing. If the optional parameter max_length is non-zero then the return value will be no longer than max_length. This may mean that not all of the compressed input can be processed, and unconsumed data will be stored in the attribute unconsumed_tail. This byte string must be passed to a subsequent call to decompress() if decompression is to continue. If max_length is zero then the whole input is decompressed, and unconsumed_tail is empty. Changed in version 3.6: max_length can be used as a keyword argument. Max_length represents the file block size that can be read into the memory at a time and is marked with unconsumed_tail to see if any remaining files need to be decompressed. Therefore, his idea is more than 102400 bytes. If there is any remaining data, it means there may be a zip bomb.","raw":null,"content":null,"categories":[],"tags":[{"name":"vulnerability","slug":"vulnerability","permalink":"https://krnick.github.io/tags/vulnerability/"},{"name":"python","slug":"python","permalink":"https://krnick.github.io/tags/python/"}]},{"title":"Debian Packaging","slug":"Debian-Packaging","date":"2021-05-03T08:10:42.000Z","updated":"2021-10-08T07:01:44.092Z","comments":true,"path":"2021/05/03/Debian-Packaging/","link":"","permalink":"https://krnick.github.io/2021/05/03/Debian-Packaging/","excerpt":"","text":"Kali Linux issue 0007121 Kali Linux Release1. Prepare your Kali Linux virtual machine to build the Debian package. Virtualbox Kail Linux image for virtualbox Update your kali Linux package source123echo &quot;deb http://http.kali.org/kali kali-rolling main non-free contrib&quot; | sudo tee /etc/apt/sources.listsudo apt-get update After setting up your virtual machine, you have to install the required packages based on the official documentation on this website. Install the required dependencies123sudo apt install -y packaging-dev apt-file gitk mrsudo apt-get install -y devscripts debhelper dh-make git-buildpackage sbuild dh-python python3-all Set up sbuild and log in again after completion123456789sudo mkdir -p &#x2F;srv&#x2F;chroots&#x2F;cd &#x2F;srv&#x2F;chroots&#x2F;sudo sbuild-createchroot --keyring&#x3D;&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;kali-archive-keyring.gpg --arch&#x3D;amd64 --components&#x3D;main,contrib,non-free --include&#x3D;kali-archive-keyring kali-dev kali-dev-amd64-sbuild http:&#x2F;&#x2F;http.kali.org&#x2F;kaliecho &quot;source-root-groups&#x3D;root,sbuild&quot; | sudo tee -a &#x2F;etc&#x2F;schroot&#x2F;chroot.d&#x2F;kali-dev-amd64-sbuild*sudo sbuild-adduser $USER 2. Creating the Debian filesThe Debian package needs that the following four files are required in the debian directory. control copyright changelog rules Here is the official documentation on how to write all four files. 3. Importing the Quark projectPlease replace the version number you would like to update. 123456789mkdir -p ~/kali/packages/quark-engine ~/kali/upstream/wget https://github.com/quark-engine/quark-engine/archive/refs/tags/v21.4.3.tar.gz -O ~/kali/upstream/quark-engine_21.4.3.orig.tar.gzcd /home/kali/kali/packages/quark-enginegit initgbp import-orig ~/kali/upstream/quark-engine_21.4.3.orig.tar.gz 4. Build Package1gbp buildpackage --git-builder=sbuild Then you will have the Quark .deb file if everything goes well. 5. Request package upgrade Register Kali Linux Bug Tracker Report an issue Report an issue by clicking the ‚ÄúReport Issue‚Äù Fill out the form Please choose the ‚ÄúTool upgrade request‚Äù option in category and ‚Äúkali-dev‚Äù option in product version and keep anything else default value. The next step is filling out the summary and the description. Attach the .deb file Upload the .deb file you just created earlier. Submit the issue When everything is all set, you can click ‚ÄúSubmit issue‚Äù. https://www.kali.org/docs/development/public-packaging/https://www.kali.org/docs/development/intro-to-packaging-example/https://www.kali.org/docs/development/setting-up-packaging-system/https://www.kali.org/docs/development/advanced-packaging-example/","raw":null,"content":null,"categories":[],"tags":[{"name":"Debian","slug":"Debian","permalink":"https://krnick.github.io/tags/Debian/"},{"name":"Linux","slug":"Linux","permalink":"https://krnick.github.io/tags/Linux/"},{"name":"Kali Linux","slug":"Kali-Linux","permalink":"https://krnick.github.io/tags/Kali-Linux/"}]},{"title":"Pipenv usage","slug":"pipenv","date":"2020-09-24T06:15:06.000Z","updated":"2021-10-08T07:01:44.093Z","comments":true,"path":"2020/09/24/pipenv/","link":"","permalink":"https://krnick.github.io/2020/09/24/pipenv/","excerpt":"","text":"Install from github1pipenv install -e git+https://github.com/quark-engine/quark-engine.git#egg=quark-engine First ‚Äúquark-enigne‚Äù: user Second ‚Äúquark-engine‚Äù: repo @develop: The branch what you want to install #egg=quark-engine: The package name that will be recorded in pipenv","raw":null,"content":null,"categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://krnick.github.io/tags/python/"},{"name":"git","slug":"git","permalink":"https://krnick.github.io/tags/git/"}]}]}